import { __decorate, __param, __metadata, __assign } from 'tslib';
import { Inject, Optional, NgZone, Injectable, EventEmitter, Output, Component, NgModule } from '@angular/core';
import * as firebaseui$1 from 'firebaseui';
import { auth } from 'firebaseui';
import { ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';
import { AngularFireAuth } from '@angular/fire/auth';
import 'firebase/auth';
import * as firebaseOriginal from 'firebase/app';
import { CommonModule } from '@angular/common';

var FirebaseuiAngularLibraryService = /** @class */ (function () {
    function FirebaseuiAngularLibraryService(options, nameOrConfig, zone) {
        // noinspection JSNonASCIINames
        var app = ɵfirebaseAppFactory(options, zone, nameOrConfig);
        // store the firebaseui instance on the window object to prevent double initialization
        if (!window.firebaseUiInstance) {
            window.firebaseUiInstance = new auth.AuthUI(app.auth());
        }
        this.firebaseUiInstance = window.firebaseUiInstance;
    }
    FirebaseuiAngularLibraryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
        { type: NgZone }
    ]; };
    FirebaseuiAngularLibraryService = __decorate([
        Injectable(),
        __param(0, Inject(FIREBASE_OPTIONS)),
        __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),
        __metadata("design:paramtypes", [Object, Object, NgZone])
    ], FirebaseuiAngularLibraryService);
    return FirebaseuiAngularLibraryService;
}());

var FirebaseuiAngularLibraryComponent = /** @class */ (function () {
    function FirebaseuiAngularLibraryComponent(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this._firebaseUiConfig = _firebaseUiConfig;
        this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
        this.ngZone = ngZone;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessWithAuthResultCallback = new EventEmitter(); // tslint:disable-line
        this.signInFailureCallback = new EventEmitter(); // tslint:disable-line
        this.uiShownCallback = new EventEmitter(); // tslint:disable-line
    }
    FirebaseuiAngularLibraryComponent_1 = FirebaseuiAngularLibraryComponent;
    Object.defineProperty(FirebaseuiAngularLibraryComponent.prototype, "firebaseUiConfig", {
        get: function () {
            return __assign(__assign({}, this._firebaseUiConfig), this._firebaseUiConfig_Feature);
        },
        enumerable: true,
        configurable: true
    });
    FirebaseuiAngularLibraryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
            if ((value && value.isAnonymous) || !value) {
                if (_this.firebaseUiConfig.signInOptions.length !== 0) {
                    _this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    };
    FirebaseuiAngularLibraryComponent.prototype.ngOnDestroy = function () {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    FirebaseuiAngularLibraryComponent.prototype.getUIAuthConfig = function () {
        if (!this.firebaseUiConfig.callbacks) {
            this._firebaseUiConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS] = true;
            this._firebaseUiConfig.callbacks = this.getCallbacks();
        }
        return this.firebaseUiConfig;
    };
    FirebaseuiAngularLibraryComponent.prototype.firebaseUIPopup = function () {
        var firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        var uiAuthConfig = this.getUIAuthConfig();
        // Check if callbacks got computed to reset them again after providing the to firebaseui.
        // Necessary for allowing updating the firebaseui config during runtime.
        var resetCallbacks = false;
        if (uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS]) {
            resetCallbacks = true;
            delete uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS];
        }
        // show the firebaseui
        firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
        if (resetCallbacks) {
            this._firebaseUiConfig.callbacks = null;
        }
    };
    FirebaseuiAngularLibraryComponent.prototype.getCallbacks = function () {
        var _this = this;
        var signInSuccessWithAuthResultCallback = function (authResult, redirectUrl) {
            _this.ngZone.run(function () {
                _this.signInSuccessWithAuthResultCallback.emit({
                    authResult: authResult,
                    redirectUrl: redirectUrl
                });
            });
            return _this.firebaseUiConfig.signInSuccessUrl;
        };
        var signInFailureCallback = function (error) {
            _this.ngZone.run(function () {
                _this.signInFailureCallback.emit({
                    code: error.code,
                    credential: error.credential
                });
            });
            return Promise.reject();
        };
        var uiShownCallback = function () {
            _this.ngZone.run(function () {
                _this.uiShownCallback.emit();
            });
        };
        return {
            signInSuccessWithAuthResult: signInSuccessWithAuthResultCallback,
            signInFailure: signInFailureCallback,
            uiShown: uiShownCallback
        };
    };
    var FirebaseuiAngularLibraryComponent_1;
    FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
    FirebaseuiAngularLibraryComponent.ctorParameters = function () { return [
        { type: AngularFireAuth },
        { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfig',] }] },
        { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfigFeature',] }] },
        { type: NgZone },
        { type: FirebaseuiAngularLibraryService }
    ]; };
    __decorate([
        Output('signInSuccessWithAuthResult'),
        __metadata("design:type", EventEmitter)
    ], FirebaseuiAngularLibraryComponent.prototype, "signInSuccessWithAuthResultCallback", void 0);
    __decorate([
        Output('signInFailure'),
        __metadata("design:type", EventEmitter)
    ], FirebaseuiAngularLibraryComponent.prototype, "signInFailureCallback", void 0);
    __decorate([
        Output('uiShown'),
        __metadata("design:type", EventEmitter)
    ], FirebaseuiAngularLibraryComponent.prototype, "uiShownCallback", void 0);
    FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = __decorate([
        Component({
            selector: 'firebase-ui',
            template: '<div id="firebaseui-auth-container"></div>'
        }),
        __param(1, Inject('firebaseUIAuthConfig')),
        __param(2, Inject('firebaseUIAuthConfigFeature')),
        __metadata("design:paramtypes", [AngularFireAuth, Object, Object, NgZone,
            FirebaseuiAngularLibraryService])
    ], FirebaseuiAngularLibraryComponent);
    return FirebaseuiAngularLibraryComponent;
}());

/*
 * Created by Raphael Jenni
 * Copyright (c) 2017 Raphael Jenni
 */
var firebase = firebaseOriginal;
var firebaseui = firebaseui$1;
var FirebaseUISignInSuccessWithAuthResult = /** @class */ (function () {
    function FirebaseUISignInSuccessWithAuthResult() {
    }
    return FirebaseUISignInSuccessWithAuthResult;
}());
var FirebaseUISignInFailure = /** @class */ (function () {
    function FirebaseUISignInFailure() {
    }
    return FirebaseUISignInFailure;
}());

var FirebaseUIModule = /** @class */ (function () {
    function FirebaseUIModule() {
    }
    FirebaseUIModule_1 = FirebaseUIModule;
    FirebaseUIModule.forRoot = function (firebaseUiAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
            ]
        };
    };
    FirebaseUIModule.forFeature = function (firebaseUIAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
            ]
        };
    };
    var FirebaseUIModule_1;
    FirebaseUIModule = FirebaseUIModule_1 = __decorate([
        NgModule({
            imports: [
                CommonModule
            ],
            declarations: [FirebaseuiAngularLibraryComponent],
            providers: [FirebaseuiAngularLibraryService],
            exports: [FirebaseuiAngularLibraryComponent]
        })
    ], FirebaseUIModule);
    return FirebaseUIModule;
}());

/*
 * Public API Surface of firebaseui-angular-library
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FirebaseUIModule, FirebaseUISignInFailure, FirebaseUISignInSuccessWithAuthResult, FirebaseuiAngularLibraryComponent, FirebaseuiAngularLibraryService, firebase, firebaseui };
//# sourceMappingURL=firebaseui-angular.js.map
