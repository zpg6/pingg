import { __decorate, __param, __metadata } from 'tslib';
import { Inject, Optional, NgZone, Injectable, EventEmitter, Output, Component, NgModule } from '@angular/core';
import * as firebaseui$1 from 'firebaseui';
import { auth } from 'firebaseui';
import { ɵfirebaseAppFactory, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';
import { AngularFireAuth } from '@angular/fire/auth';
import 'firebase/auth';
import * as firebaseOriginal from 'firebase/app';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/fire/auth';
let FirebaseuiAngularLibraryService = class FirebaseuiAngularLibraryService {
    constructor(options, nameOrConfig, zone) {
        // noinspection JSNonASCIINames
        const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);
        // store the firebaseui instance on the window object to prevent double initialization
        if (!window.firebaseUiInstance) {
            window.firebaseUiInstance = new auth.AuthUI(app.auth());
        }
        this.firebaseUiInstance = window.firebaseUiInstance;
    }
};
FirebaseuiAngularLibraryService.ɵfac = function FirebaseuiAngularLibraryService_Factory(t) { return new (t || FirebaseuiAngularLibraryService)(ɵngcc0.ɵɵinject(FIREBASE_OPTIONS), ɵngcc0.ɵɵinject(FIREBASE_APP_NAME, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
FirebaseuiAngularLibraryService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FirebaseuiAngularLibraryService, factory: function (t) { return FirebaseuiAngularLibraryService.ɵfac(t); } });
FirebaseuiAngularLibraryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [FIREBASE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FIREBASE_APP_NAME,] }] },
    { type: NgZone }
];
FirebaseuiAngularLibraryService = __decorate([ __param(0, Inject(FIREBASE_OPTIONS)),
    __param(1, Optional()), __param(1, Inject(FIREBASE_APP_NAME)),
    __metadata("design:paramtypes", [Object, Object, NgZone])
], FirebaseuiAngularLibraryService);

var FirebaseuiAngularLibraryComponent_1;
let FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = class FirebaseuiAngularLibraryComponent {
    constructor(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this._firebaseUiConfig = _firebaseUiConfig;
        this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
        this.ngZone = ngZone;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessWithAuthResultCallback = new EventEmitter(); // tslint:disable-line
        this.signInFailureCallback = new EventEmitter(); // tslint:disable-line
        this.uiShownCallback = new EventEmitter(); // tslint:disable-line
    }
    get firebaseUiConfig() {
        return Object.assign(Object.assign({}, this._firebaseUiConfig), this._firebaseUiConfig_Feature);
    }
    ngOnInit() {
        this.subscription = this.angularFireAuth.authState.subscribe((value) => {
            if ((value && value.isAnonymous) || !value) {
                if (this.firebaseUiConfig.signInOptions.length !== 0) {
                    this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    }
    ngOnDestroy() {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    getUIAuthConfig() {
        if (!this.firebaseUiConfig.callbacks) {
            this._firebaseUiConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS] = true;
            this._firebaseUiConfig.callbacks = this.getCallbacks();
        }
        return this.firebaseUiConfig;
    }
    firebaseUIPopup() {
        const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        const uiAuthConfig = this.getUIAuthConfig();
        // Check if callbacks got computed to reset them again after providing the to firebaseui.
        // Necessary for allowing updating the firebaseui config during runtime.
        let resetCallbacks = false;
        if (uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS]) {
            resetCallbacks = true;
            delete uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS];
        }
        // show the firebaseui
        firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
        if (resetCallbacks) {
            this._firebaseUiConfig.callbacks = null;
        }
    }
    getCallbacks() {
        const signInSuccessWithAuthResultCallback = (authResult, redirectUrl) => {
            this.ngZone.run(() => {
                this.signInSuccessWithAuthResultCallback.emit({
                    authResult,
                    redirectUrl
                });
            });
            return this.firebaseUiConfig.signInSuccessUrl;
        };
        const signInFailureCallback = (error) => {
            this.ngZone.run(() => {
                this.signInFailureCallback.emit({
                    code: error.code,
                    credential: error.credential
                });
            });
            return Promise.reject();
        };
        const uiShownCallback = () => {
            this.ngZone.run(() => {
                this.uiShownCallback.emit();
            });
        };
        return {
            signInSuccessWithAuthResult: signInSuccessWithAuthResultCallback,
            signInFailure: signInFailureCallback,
            uiShown: uiShownCallback
        };
    }
};
FirebaseuiAngularLibraryComponent.ɵfac = function FirebaseuiAngularLibraryComponent_Factory(t) { return new (t || FirebaseuiAngularLibraryComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AngularFireAuth), ɵngcc0.ɵɵdirectiveInject('firebaseUIAuthConfig'), ɵngcc0.ɵɵdirectiveInject('firebaseUIAuthConfigFeature'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(FirebaseuiAngularLibraryService)); };
FirebaseuiAngularLibraryComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FirebaseuiAngularLibraryComponent, selectors: [["firebase-ui"]], outputs: { signInSuccessWithAuthResultCallback: "signInSuccessWithAuthResult", signInFailureCallback: "signInFailure", uiShownCallback: "uiShown" }, decls: 1, vars: 0, consts: [["id", "firebaseui-auth-container"]], template: function FirebaseuiAngularLibraryComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } }, encapsulation: 2 });
FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
FirebaseuiAngularLibraryComponent.ctorParameters = () => [
    { type: AngularFireAuth },
    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfig',] }] },
    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfigFeature',] }] },
    { type: NgZone },
    { type: FirebaseuiAngularLibraryService }
];
__decorate([
    Output('signInSuccessWithAuthResult'),
    __metadata("design:type", EventEmitter)
], FirebaseuiAngularLibraryComponent.prototype, "signInSuccessWithAuthResultCallback", void 0);
__decorate([
    Output('signInFailure'),
    __metadata("design:type", EventEmitter)
], FirebaseuiAngularLibraryComponent.prototype, "signInFailureCallback", void 0);
__decorate([
    Output('uiShown'),
    __metadata("design:type", EventEmitter)
], FirebaseuiAngularLibraryComponent.prototype, "uiShownCallback", void 0);
FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = __decorate([ __param(1, Inject('firebaseUIAuthConfig')),
    __param(2, Inject('firebaseUIAuthConfigFeature')),
    __metadata("design:paramtypes", [AngularFireAuth, Object, Object, NgZone,
        FirebaseuiAngularLibraryService])
], FirebaseuiAngularLibraryComponent);

/*
 * Created by Raphael Jenni
 * Copyright (c) 2017 Raphael Jenni
 */
const firebase = firebaseOriginal;
const firebaseui = firebaseui$1;
class FirebaseUISignInSuccessWithAuthResult {
}
class FirebaseUISignInFailure {
}

var FirebaseUIModule_1;
let FirebaseUIModule = FirebaseUIModule_1 = class FirebaseUIModule {
    static forRoot(firebaseUiAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
            ]
        };
    }
    static forFeature(firebaseUIAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
            ]
        };
    }
};
FirebaseUIModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: FirebaseUIModule });
FirebaseUIModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function FirebaseUIModule_Factory(t) { return new (t || FirebaseUIModule)(); }, providers: [FirebaseuiAngularLibraryService], imports: [[
            CommonModule
        ]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirebaseuiAngularLibraryService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [FIREBASE_OPTIONS]
            }] }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [FIREBASE_APP_NAME]
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirebaseuiAngularLibraryComponent, [{
        type: Component,
        args: [{
                selector: 'firebase-ui',
                template: '<div id="firebaseui-auth-container"></div>'
            }]
    }], function () { return [{ type: ɵngcc1.AngularFireAuth }, { type: undefined, decorators: [{
                type: Inject,
                args: ['firebaseUIAuthConfig']
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: ['firebaseUIAuthConfigFeature']
            }] }, { type: ɵngcc0.NgZone }, { type: FirebaseuiAngularLibraryService }]; }, { signInSuccessWithAuthResultCallback: [{
            type: Output,
            args: ['signInSuccessWithAuthResult']
        }], signInFailureCallback: [{
            type: Output,
            args: ['signInFailure']
        }], uiShownCallback: [{
            type: Output,
            args: ['uiShown']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FirebaseUIModule, { declarations: function () { return [FirebaseuiAngularLibraryComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [FirebaseuiAngularLibraryComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FirebaseUIModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [FirebaseuiAngularLibraryComponent],
                providers: [FirebaseuiAngularLibraryService],
                exports: [FirebaseuiAngularLibraryComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of firebaseui-angular-library
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FirebaseUIModule, FirebaseUISignInFailure, FirebaseUISignInSuccessWithAuthResult, FirebaseuiAngularLibraryComponent, FirebaseuiAngularLibraryService, firebase, firebaseui };

//# sourceMappingURL=firebaseui-angular.js.map