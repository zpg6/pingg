(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser'), require('path'), require('ngx-lottie'), require('fs')) :
    typeof define === 'function' && define.amd ? define('ngx-lottie/server', ['exports', '@angular/core', '@angular/platform-browser', 'path', 'ngx-lottie', 'fs'], factory) :
    (global = global || self, factory(global['ngx-lottie-server'] = {}, global.ng.core, global.ng.platformBrowser, global.path, global['ngx-lottie'], global.fs));
}(this, (function (exports, core, platformBrowser, path, ngxLottie, fs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: utils.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} path
     * @return {?}
     */
    function readFileWithAnimationData(path) {
        return new Promise(( /**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */function (resolve, reject) {
            fs.readFile(path, ( /**
             * @param {?} error
             * @param {?} data
             * @return {?}
             */function (error, data) {
                if (error) {
                    return reject(error);
                }
                resolve(data.toString());
            }));
        }));
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: internals.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} transferState
     * @param {?} animations
     * @param {?} pathsToAnimations
     * @return {?}
     */
    function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
        /** @type {?} */
        var sources = [];
        var _loop_1 = function (i, length) {
            /** @type {?} */
            var path = pathsToAnimations[i];
            /** @type {?} */
            var source = readFileWithAnimationData(path).then(( /**
             * @param {?} animationData
             * @return {?}
             */function (/**
             * @param {?} animationData
             * @return {?}
             */ animationData) {
                transferAnimationData(transferState, animations[i], animationData);
            }));
            sources.push(source);
        };
        for (var i = 0, length = animations.length; i < length; i++) {
            _loop_1(i, length);
        }
        return sources;
    }
    /**
     * @param {?} state
     * @param {?} animation
     * @param {?} animationData
     * @return {?}
     */
    function transferAnimationData(state, animation, animationData) {
        animation = ngxLottie.transformAnimationFilenameToKey(animation);
        /** @type {?} */
        var key = platformBrowser.makeStateKey(animation);
        state.set(key, JSON.parse(animationData));
    }
    /**
     * @param {?} options
     * @param {?} state
     * @return {?}
     */
    function appInitializerFactory(options, state) {
        /** @type {?} */
        var pathsToAnimations = resolveLottiePaths(options);
        /** @type {?} */
        var sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
        return ( /**
         * @return {?}
         */function () { return Promise.all(sources); });
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    function resolveLottiePaths(_a) {
        var preloadAnimations = _a.preloadAnimations;
        var folder = preloadAnimations.folder, animations = preloadAnimations.animations;
        /** @type {?} */
        var path$1 = path.join(process.cwd(), folder);
        return animations.map(( /**
         * @param {?} animation
         * @return {?}
         */function (/**
         * @param {?} animation
         * @return {?}
         */ animation) { return path.join(path$1, animation); }));
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lottie-server.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOTTIE_SERVER_OPTIONS = new core.InjectionToken('LottieServerOptions');
    var LottieServerModule = /** @class */ (function () {
        function LottieServerModule() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        LottieServerModule.forRoot = function (options) {
            return {
                ngModule: LottieServerModule,
                providers: [
                    {
                        provide: LOTTIE_SERVER_OPTIONS,
                        useValue: options
                    },
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: appInitializerFactory,
                        multi: true,
                        deps: [LOTTIE_SERVER_OPTIONS, platformBrowser.TransferState]
                    }
                ]
            };
        };
        return LottieServerModule;
    }());
    LottieServerModule.decorators = [
        { type: core.NgModule }
    ];

    /**
     * @fileoverview added by tsickle
     * Generated from: index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: ngx-lottie-server.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.LottieServerModule = LottieServerModule;
    exports.ɵa = LOTTIE_SERVER_OPTIONS;
    exports.ɵb = appInitializerFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-lottie-server.umd.js.map
