import { InjectionToken, APP_INITIALIZER, NgModule } from '@angular/core';
import { makeStateKey, TransferState } from '@angular/platform-browser';
import { join } from 'path';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFile } from 'fs';

/**
 * @fileoverview added by tsickle
 * Generated from: utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} path
 * @return {?}
 */
import * as ɵngcc0 from '@angular/core';
function readFileWithAnimationData(path) {
    return new Promise((/**
     * @param {?} resolve
     * @param {?} reject
     * @return {?}
     */
    (resolve, reject) => {
        readFile(path, (/**
         * @param {?} error
         * @param {?} data
         * @return {?}
         */
        (error, data) => {
            if (error) {
                return reject(error);
            }
            resolve(data.toString());
        }));
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: internals.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} transferState
 * @param {?} animations
 * @param {?} pathsToAnimations
 * @return {?}
 */
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    /** @type {?} */
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        /** @type {?} */
        const path = pathsToAnimations[i];
        /** @type {?} */
        const source = readFileWithAnimationData(path).then((/**
         * @param {?} animationData
         * @return {?}
         */
        animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        }));
        sources.push(source);
    }
    return sources;
}
/**
 * @param {?} state
 * @param {?} animation
 * @param {?} animationData
 * @return {?}
 */
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    /** @type {?} */
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
/**
 * @param {?} options
 * @param {?} state
 * @return {?}
 */
function appInitializerFactory(options, state) {
    /** @type {?} */
    const pathsToAnimations = resolveLottiePaths(options);
    /** @type {?} */
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return (/**
     * @return {?}
     */
    () => Promise.all(sources));
}
/**
 * @param {?} __0
 * @return {?}
 */
function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    /** @type {?} */
    const path = join(process.cwd(), folder);
    return animations.map((/**
     * @param {?} animation
     * @return {?}
     */
    animation => join(path, animation)));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lottie-server.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const LOTTIE_SERVER_OPTIONS = new InjectionToken('LottieServerOptions');
class LottieServerModule {
    /**
     * @param {?} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: LottieServerModule,
            providers: [
                {
                    provide: LOTTIE_SERVER_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInitializerFactory,
                    multi: true,
                    deps: [LOTTIE_SERVER_OPTIONS, TransferState]
                }
            ]
        };
    }
}
LottieServerModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LottieServerModule });
LottieServerModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LottieServerModule_Factory(t) { return new (t || LottieServerModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LottieServerModule, [{
        type: NgModule
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-lottie-server.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LottieServerModule, LOTTIE_SERVER_OPTIONS as ɵa, appInitializerFactory as ɵb };

//# sourceMappingURL=ngx-lottie-server.js.map