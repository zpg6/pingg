/**
 * @fileoverview added by tsickle
 * Generated from: internals.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { join } from 'path';
import { makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFileWithAnimationData } from './utils';
/**
 * @param {?} transferState
 * @param {?} animations
 * @param {?} pathsToAnimations
 * @return {?}
 */
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    /** @type {?} */
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        /** @type {?} */
        const path = pathsToAnimations[i];
        /** @type {?} */
        const source = readFileWithAnimationData(path).then((/**
         * @param {?} animationData
         * @return {?}
         */
        animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        }));
        sources.push(source);
    }
    return sources;
}
/**
 * @param {?} state
 * @param {?} animation
 * @param {?} animationData
 * @return {?}
 */
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    /** @type {?} */
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
/**
 * @param {?} options
 * @param {?} state
 * @return {?}
 */
export function appInitializerFactory(options, state) {
    /** @type {?} */
    const pathsToAnimations = resolveLottiePaths(options);
    /** @type {?} */
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return (/**
     * @return {?}
     */
    () => Promise.all(sources));
}
/**
 * @param {?} __0
 * @return {?}
 */
export function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    /** @type {?} */
    const path = join(process.cwd(), folder);
    return animations.map((/**
     * @param {?} animation
     * @return {?}
     */
    animation => join(path, animation)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZlci9zcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQWlCLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXhFLE9BQU8sRUFBcUIsK0JBQStCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFaEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sU0FBUyxDQUFDOzs7Ozs7O0FBR3BELFNBQVMsNEJBQTRCLENBQ25DLGFBQTRCLEVBQzVCLFVBQStCLEVBQy9CLGlCQUFvQzs7VUFFOUIsT0FBTyxHQUFvQixFQUFFO0lBRW5DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7O2NBQ3JELElBQUksR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7O2NBRTNCLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJOzs7O1FBQUMsYUFBYSxDQUFDLEVBQUU7WUFDbEUscUJBQXFCLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNyRSxDQUFDLEVBQUM7UUFFRixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQzs7Ozs7OztBQUVELFNBQVMscUJBQXFCLENBQzVCLEtBQW9CLEVBQ3BCLFNBQTRCLEVBQzVCLGFBQTRCO0lBRTVCLFNBQVMsR0FBRywrQkFBK0IsQ0FBQyxTQUFTLENBQUMsQ0FBQzs7VUFDakQsR0FBRyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUM7SUFDbkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQzVDLENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxPQUE0QixFQUFFLEtBQW9COztVQUNoRixpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7O1VBQy9DLE9BQU8sR0FBRyw0QkFBNEIsQ0FDMUMsS0FBSyxFQUNMLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQ3BDLGlCQUFpQixDQUNsQjtJQUVEOzs7SUFBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFDO0FBQ3BDLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEVBQUUsaUJBQWlCLEVBQXVCO1VBQ3JFLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLGlCQUFpQjs7VUFDMUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDO0lBRXhDLE9BQU8sVUFBVSxDQUFDLEdBQUc7Ozs7SUFBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSwgbWFrZVN0YXRlS2V5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkZpbGVuYW1lLCB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5IH0gZnJvbSAnbmd4LWxvdHRpZSc7XG5cbmltcG9ydCB7IHJlYWRGaWxlV2l0aEFuaW1hdGlvbkRhdGEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IExvdHRpZVNlcnZlck9wdGlvbnMsIFBhdGhUb0FuaW1hdGlvbiwgQW5pbWF0aW9uRGF0YSB9IGZyb20gJy4vc3ltYm9scyc7XG5cbmZ1bmN0aW9uIHJlYWRBbmRUcmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsXG4gIGFuaW1hdGlvbnM6IEFuaW1hdGlvbkZpbGVuYW1lW10sXG4gIHBhdGhzVG9BbmltYXRpb25zOiBQYXRoVG9BbmltYXRpb25bXVxuKTogUHJvbWlzZTx2b2lkPltdIHtcbiAgY29uc3Qgc291cmNlczogUHJvbWlzZTx2b2lkPltdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IGFuaW1hdGlvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwYXRoID0gcGF0aHNUb0FuaW1hdGlvbnNbaV07XG5cbiAgICBjb25zdCBzb3VyY2UgPSByZWFkRmlsZVdpdGhBbmltYXRpb25EYXRhKHBhdGgpLnRoZW4oYW5pbWF0aW9uRGF0YSA9PiB7XG4gICAgICB0cmFuc2ZlckFuaW1hdGlvbkRhdGEodHJhbnNmZXJTdGF0ZSwgYW5pbWF0aW9uc1tpXSwgYW5pbWF0aW9uRGF0YSk7XG4gICAgfSk7XG5cbiAgICBzb3VyY2VzLnB1c2goc291cmNlKTtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2VzO1xufVxuXG5mdW5jdGlvbiB0cmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gIHN0YXRlOiBUcmFuc2ZlclN0YXRlLFxuICBhbmltYXRpb246IEFuaW1hdGlvbkZpbGVuYW1lLFxuICBhbmltYXRpb25EYXRhOiBBbmltYXRpb25EYXRhXG4pOiB2b2lkIHtcbiAgYW5pbWF0aW9uID0gdHJhbnNmb3JtQW5pbWF0aW9uRmlsZW5hbWVUb0tleShhbmltYXRpb24pO1xuICBjb25zdCBrZXkgPSBtYWtlU3RhdGVLZXkoYW5pbWF0aW9uKTtcbiAgc3RhdGUuc2V0KGtleSwgSlNPTi5wYXJzZShhbmltYXRpb25EYXRhKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBJbml0aWFsaXplckZhY3Rvcnkob3B0aW9uczogTG90dGllU2VydmVyT3B0aW9ucywgc3RhdGU6IFRyYW5zZmVyU3RhdGUpIHtcbiAgY29uc3QgcGF0aHNUb0FuaW1hdGlvbnMgPSByZXNvbHZlTG90dGllUGF0aHMob3B0aW9ucyk7XG4gIGNvbnN0IHNvdXJjZXMgPSByZWFkQW5kVHJhbnNmZXJBbmltYXRpb25EYXRhKFxuICAgIHN0YXRlLFxuICAgIG9wdGlvbnMucHJlbG9hZEFuaW1hdGlvbnMuYW5pbWF0aW9ucyxcbiAgICBwYXRoc1RvQW5pbWF0aW9uc1xuICApO1xuXG4gIHJldHVybiAoKSA9PiBQcm9taXNlLmFsbChzb3VyY2VzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVMb3R0aWVQYXRocyh7IHByZWxvYWRBbmltYXRpb25zIH06IExvdHRpZVNlcnZlck9wdGlvbnMpOiBQYXRoVG9BbmltYXRpb25bXSB7XG4gIGNvbnN0IHsgZm9sZGVyLCBhbmltYXRpb25zIH0gPSBwcmVsb2FkQW5pbWF0aW9ucztcbiAgY29uc3QgcGF0aCA9IGpvaW4ocHJvY2Vzcy5jd2QoKSwgZm9sZGVyKTtcblxuICByZXR1cm4gYW5pbWF0aW9ucy5tYXAoYW5pbWF0aW9uID0+IGpvaW4ocGF0aCwgYW5pbWF0aW9uKSk7XG59XG4iXX0=