/**
 * @fileoverview added by tsickle
 * Generated from: src/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, of } from 'rxjs';
import { map, publishReplay, refCount } from 'rxjs/operators';
/**
 * @param {?} animation
 * @return {?}
 */
export function transformAnimationFilenameToKey(animation) {
    return `animation-${animation.split('.json')[0]}`;
}
/**
 * @param {?} options
 * @param {?} container
 * @param {?} animationCache
 * @return {?}
 */
export function mergeOptionsWithDefault(options, container, animationCache) {
    /** @type {?} */
    const merged = Object.assign({
        container,
        renderer: 'svg',
        loop: true,
        autoplay: true,
    }, options);
    return animationCache !== null ? animationCache.transformOptions(merged) : merged;
}
/**
 * @param {?} animationCache
 * @param {?} options
 * @param {?} animationItem
 * @return {?}
 */
export function awaitConfigAndCache(animationCache, options, animationItem) {
    if (animationCache === null) {
        return;
    }
    animationItem.addEventListener('config_ready', (/**
     * @return {?}
     */
    () => {
        animationCache.set(options, animationItem);
    }));
}
/**
 * @param {?} player
 * @return {?}
 */
export function streamifyPlayerOrLoader(player) {
    /** @type {?} */
    const playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map((/**
         * @param {?} module
         * @return {?}
         */
        module => module.default || module)), publishReplay(1), refCount());
    }
    else {
        return of(playerOrLoader);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7O0FBYTlELE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxTQUE0QjtJQUMxRSxPQUFPLGFBQWEsU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BELENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLE9BQWdDLEVBQ2hDLFNBQXNCLEVBQ3RCLGNBQXFDOztVQUUvQixNQUFNLEdBQXNELE1BQU0sQ0FBQyxNQUFNLENBQzdFO1FBQ0UsU0FBUztRQUNULFFBQVEsRUFBRSxLQUFLO1FBQ2YsSUFBSSxFQUFFLElBQUk7UUFDVixRQUFRLEVBQUUsSUFBSTtLQUNmLEVBQ0QsT0FBTyxDQUNSO0lBRUQsT0FBTyxjQUFjLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztBQUNwRixDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLG1CQUFtQixDQUNqQyxjQUFxQyxFQUNyQyxPQUF5QixFQUN6QixhQUE0QjtJQUU1QixJQUFJLGNBQWMsS0FBSyxJQUFJLEVBQUU7UUFDM0IsT0FBTztLQUNSO0lBRUQsYUFBYSxDQUFDLGdCQUFnQixDQUFDLGNBQWM7OztJQUFFLEdBQUcsRUFBRTtRQUNsRCxjQUFjLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDLEVBQUMsQ0FBQztBQUNMLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUNyQyxNQUFtQzs7VUFFN0IsY0FBYyxHQUFHLE1BQU0sRUFBRTtJQUUvQixJQUFJLGNBQWMsWUFBWSxPQUFPLEVBQUU7UUFDckMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBQyxFQUN2QyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQ2hCLFFBQVEsRUFBRSxDQUNYLENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDM0I7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbSwgb2YsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gIExvdHRpZVBsYXllcixcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uRmlsZW5hbWUsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuICBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgTG90dGllUGxheWVyRmFjdG9yeU9yTG9hZGVyLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2FjaGUgfSBmcm9tICcuL2FuaW1hdGlvbi1jYWNoZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5KGFuaW1hdGlvbjogQW5pbWF0aW9uRmlsZW5hbWUpOiBzdHJpbmcge1xuICByZXR1cm4gYGFuaW1hdGlvbi0ke2FuaW1hdGlvbi5zcGxpdCgnLmpzb24nKVswXX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VPcHRpb25zV2l0aERlZmF1bHQoXG4gIG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMgfCBudWxsLFxuICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICBhbmltYXRpb25DYWNoZTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsLFxuKTogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCB7XG4gIGNvbnN0IG1lcmdlZDogQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEgfCBBbmltYXRpb25Db25maWdXaXRoUGF0aCA9IE9iamVjdC5hc3NpZ24oXG4gICAge1xuICAgICAgY29udGFpbmVyLFxuICAgICAgcmVuZGVyZXI6ICdzdmcnLFxuICAgICAgbG9vcDogdHJ1ZSxcbiAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgIH0sXG4gICAgb3B0aW9ucyxcbiAgKTtcblxuICByZXR1cm4gYW5pbWF0aW9uQ2FjaGUgIT09IG51bGwgPyBhbmltYXRpb25DYWNoZS50cmFuc2Zvcm1PcHRpb25zKG1lcmdlZCkgOiBtZXJnZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdENvbmZpZ0FuZENhY2hlKFxuICBhbmltYXRpb25DYWNoZTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsLFxuICBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zLFxuICBhbmltYXRpb25JdGVtOiBBbmltYXRpb25JdGVtLFxuKTogdm9pZCB7XG4gIGlmIChhbmltYXRpb25DYWNoZSA9PT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGFuaW1hdGlvbkl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY29uZmlnX3JlYWR5JywgKCkgPT4ge1xuICAgIGFuaW1hdGlvbkNhY2hlLnNldChvcHRpb25zLCBhbmltYXRpb25JdGVtKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJlYW1pZnlQbGF5ZXJPckxvYWRlcihcbiAgcGxheWVyOiBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG4pOiBPYnNlcnZhYmxlPExvdHRpZVBsYXllcj4ge1xuICBjb25zdCBwbGF5ZXJPckxvYWRlciA9IHBsYXllcigpO1xuXG4gIGlmIChwbGF5ZXJPckxvYWRlciBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICByZXR1cm4gZnJvbShwbGF5ZXJPckxvYWRlcikucGlwZShcbiAgICAgIG1hcChtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlKSxcbiAgICAgIHB1Ymxpc2hSZXBsYXkoMSksXG4gICAgICByZWZDb3VudCgpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9mKHBsYXllck9yTG9hZGVyKTtcbiAgfVxufVxuIl19