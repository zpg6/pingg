/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, Self, ElementRef, PLATFORM_ID, } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
export class LottieDirective extends BaseDirective {
    /**
     * @param {?} platformId
     * @param {?} host
     * @param {?} eventsFacade
     * @param {?} animationLoader
     */
    constructor(platformId, host, eventsFacade, animationLoader) {
        super(platformId, animationLoader);
        this.host = host;
        this.eventsFacade = eventsFacade;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.loadAnimation(changes, this.host.nativeElement, this.eventsFacade, this);
    }
}
LottieDirective.decorators = [
    { type: Directive, args: [{
                selector: '[lottie]',
                providers: [LottieEventsFacade],
            },] }
];
/** @nocollapse */
LottieDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef, decorators: [{ type: Self }] },
    { type: LottieEventsFacade, decorators: [{ type: Self }] },
    { type: AnimationLoader }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LottieDirective.prototype.host;
    /**
     * @type {?}
     * @private
     */
    LottieDirective.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcmMvbG90dGllLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsTUFBTSxFQUNOLElBQUksRUFDSixVQUFVLEVBQ1YsV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFNckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsYUFBYTs7Ozs7OztJQUNoRCxZQUN1QixVQUFrQixFQUN2QixJQUE2QixFQUM3QixZQUFnQyxFQUNoRCxlQUFnQztRQUVoQyxLQUFLLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBSm5CLFNBQUksR0FBSixJQUFJLENBQXlCO1FBQzdCLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtJQUlsRCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pGLENBQUM7OztZQWhCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hDOzs7O3lDQUdJLE1BQU0sU0FBQyxXQUFXO1lBaEJyQixVQUFVLHVCQWlCUCxJQUFJO1lBVEEsa0JBQWtCLHVCQVV0QixJQUFJO1lBWEEsZUFBZTs7Ozs7OztJQVVwQiwrQkFBNkM7Ozs7O0lBQzdDLHVDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5qZWN0LFxuICBTZWxmLFxuICBFbGVtZW50UmVmLFxuICBQTEFURk9STV9JRCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tsb3R0aWVdJyxcbiAgcHJvdmlkZXJzOiBbTG90dGllRXZlbnRzRmFjYWRlXSxcbn0pXG5leHBvcnQgY2xhc3MgTG90dGllRGlyZWN0aXZlIGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBAU2VsZigpIHByaXZhdGUgaG9zdDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgQFNlbGYoKSBwcml2YXRlIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkxvYWRlcjogQW5pbWF0aW9uTG9hZGVyLFxuICApIHtcbiAgICBzdXBlcihwbGF0Zm9ybUlkLCBhbmltYXRpb25Mb2FkZXIpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIHN1cGVyLmxvYWRBbmltYXRpb24oY2hhbmdlcywgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQsIHRoaXMuZXZlbnRzRmFjYWRlLCB0aGlzKTtcbiAgfVxufVxuIl19