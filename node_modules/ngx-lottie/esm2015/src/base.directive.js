/**
 * @fileoverview added by tsickle
 * Generated from: src/base.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, Inject, PLATFORM_ID, } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { Subject } from 'rxjs';
import { AnimationLoader } from './animation-loader';
export class BaseDirective {
    /**
     * @param {?} platformId
     * @param {?} animationLoader
     */
    constructor(platformId, animationLoader) {
        this.platformId = platformId;
        this.animationLoader = animationLoader;
        this.options = null;
        this.containerClass = null;
        this.styles = null;
        /**
         * `animationCreated` is dispatched after calling `loadAnimation`
         */
        this.animationCreated = new EventEmitter();
        /**
         * `complete` is dispatched after completing the last frame
         */
        this.complete = new EventEmitter();
        /**
         * `loopComplete` is dispatched after completing frame loop
         */
        this.loopComplete = new EventEmitter();
        /**
         * `enterFrame` is dispatched after entering the new frame
         */
        this.enterFrame = new EventEmitter();
        /**
         * `segmentStart` is dispatched when the new segment is adjusted
         */
        this.segmentStart = new EventEmitter();
        /**
         * Original event name is `config_ready`. `config_ready` is dispatched
         * after the needed renderer is configured
         */
        this.configReady = new EventEmitter();
        /**
         * Original event name is `data_ready`. `data_ready` is dispatched
         * when all parts of the animation have been loaded
         */
        this.dataReady = new EventEmitter();
        /**
         * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
         * when elements have been added to the DOM
         */
        this.domLoaded = new EventEmitter();
        /**
         * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
         * it's useful for releasing resources
         */
        this.destroy = new EventEmitter();
        /**
         * `error` will be dispatched if the lottie player could not render
         * some frame or parse config
         */
        this.error = new EventEmitter();
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @protected
     * @param {?} changes
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} instance
     * @return {?}
     */
    loadAnimation(changes, container, eventsFacade, instance) {
        if (isPlatformServer(this.platformId) || !changes.options) {
            return;
        }
        eventsFacade.destroyAnimation();
        this.animationLoader.resolveLoaderAndLoadAnimation(changes.options.currentValue, container, eventsFacade, this.animationCreated, instance, this.destroy$);
    }
}
BaseDirective.decorators = [
    { type: Directive, args: [{ selector: '[lottie]' },] }
];
/** @nocollapse */
BaseDirective.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AnimationLoader }
];
BaseDirective.propDecorators = {
    options: [{ type: Input }],
    containerClass: [{ type: Input }],
    styles: [{ type: Input }],
    animationCreated: [{ type: Output }],
    complete: [{ type: Output }],
    loopComplete: [{ type: Output }],
    enterFrame: [{ type: Output }],
    segmentStart: [{ type: Output }],
    configReady: [{ type: Output }],
    dataReady: [{ type: Output }],
    domLoaded: [{ type: Output }],
    destroy: [{ type: Output }],
    error: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BaseDirective.prototype.options;
    /** @type {?} */
    BaseDirective.prototype.containerClass;
    /** @type {?} */
    BaseDirective.prototype.styles;
    /**
     * `animationCreated` is dispatched after calling `loadAnimation`
     * @type {?}
     */
    BaseDirective.prototype.animationCreated;
    /**
     * `complete` is dispatched after completing the last frame
     * @type {?}
     */
    BaseDirective.prototype.complete;
    /**
     * `loopComplete` is dispatched after completing frame loop
     * @type {?}
     */
    BaseDirective.prototype.loopComplete;
    /**
     * `enterFrame` is dispatched after entering the new frame
     * @type {?}
     */
    BaseDirective.prototype.enterFrame;
    /**
     * `segmentStart` is dispatched when the new segment is adjusted
     * @type {?}
     */
    BaseDirective.prototype.segmentStart;
    /**
     * Original event name is `config_ready`. `config_ready` is dispatched
     * after the needed renderer is configured
     * @type {?}
     */
    BaseDirective.prototype.configReady;
    /**
     * Original event name is `data_ready`. `data_ready` is dispatched
     * when all parts of the animation have been loaded
     * @type {?}
     */
    BaseDirective.prototype.dataReady;
    /**
     * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched
     * when elements have been added to the DOM
     * @type {?}
     */
    BaseDirective.prototype.domLoaded;
    /**
     * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,
     * it's useful for releasing resources
     * @type {?}
     */
    BaseDirective.prototype.destroy;
    /**
     * `error` will be dispatched if the lottie player could not render
     * some frame or parse config
     * @type {?}
     */
    BaseDirective.prototype.error;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    BaseDirective.prototype.animationLoader;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3JjL2Jhc2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRW5ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFhL0IsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXJELE1BQU0sT0FBTyxhQUFhOzs7OztJQWdFeEIsWUFDK0IsVUFBa0IsRUFDdkMsZUFBZ0M7UUFEWCxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ3ZDLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQWpFakMsWUFBTyxHQUE0QixJQUFJLENBQUM7UUFFeEMsbUJBQWMsR0FBa0IsSUFBSSxDQUFDO1FBRXJDLFdBQU0sR0FBd0MsSUFBSSxDQUFDOzs7O1FBS2xELHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFpQixDQUFDOzs7O1FBS3JELGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQzs7OztRQUsvQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDOzs7O1FBS3ZELGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBcUIsQ0FBQzs7OztRQUtuRCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUF1QixDQUFDOzs7OztRQU12RCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7Ozs7O1FBTXZDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDOzs7OztRQU1yQyxjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQzs7Ozs7UUFNckMsWUFBTyxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDOzs7OztRQU03QyxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQWdELENBQUM7UUFFM0UsYUFBUSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFLcEMsQ0FBQzs7OztJQUVKLFdBQVc7UUFDVCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7Ozs7Ozs7O0lBRVMsYUFBYSxDQUNyQixPQUFzQixFQUN0QixTQUFzQixFQUN0QixZQUFnQyxFQUNoQyxRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDekQsT0FBTztTQUNSO1FBRUQsWUFBWSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFaEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyw2QkFBNkIsQ0FDaEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQzVCLFNBQVMsRUFDVCxZQUFZLEVBQ1osSUFBSSxDQUFDLGdCQUFnQixFQUNyQixRQUFRLEVBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO0lBQ0osQ0FBQzs7O1lBL0ZGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUU7Ozs7eUNBa0U5QixNQUFNLFNBQUMsV0FBVztZQXJFZCxlQUFlOzs7c0JBS3JCLEtBQUs7NkJBRUwsS0FBSztxQkFFTCxLQUFLOytCQUtMLE1BQU07dUJBS04sTUFBTTsyQkFLTixNQUFNO3lCQUtOLE1BQU07MkJBS04sTUFBTTswQkFNTixNQUFNO3dCQU1OLE1BQU07d0JBTU4sTUFBTTtzQkFNTixNQUFNO29CQU1OLE1BQU07Ozs7SUEzRFAsZ0NBQWlEOztJQUVqRCx1Q0FBOEM7O0lBRTlDLCtCQUE0RDs7Ozs7SUFLNUQseUNBQStEOzs7OztJQUsvRCxpQ0FBeUQ7Ozs7O0lBS3pELHFDQUFpRTs7Ozs7SUFLakUsbUNBQTZEOzs7OztJQUs3RCxxQ0FBaUU7Ozs7OztJQU1qRSxvQ0FBaUQ7Ozs7OztJQU1qRCxrQ0FBK0M7Ozs7OztJQU0vQyxrQ0FBK0M7Ozs7OztJQU0vQyxnQ0FBdUQ7Ozs7OztJQU12RCw4QkFBbUY7Ozs7O0lBRW5GLGlDQUF1Qzs7Ozs7SUFHckMsbUNBQStDOzs7OztJQUMvQyx3Q0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5qZWN0LFxuICBQTEFURk9STV9JRCxcbiAgT25EZXN0cm95LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIEFuaW1hdGlvbk9wdGlvbnMsXG4gIEJNQ29tcGxldGVFdmVudCxcbiAgQk1Db21wbGV0ZUxvb3BFdmVudCxcbiAgQk1FbnRlckZyYW1lRXZlbnQsXG4gIEJNU2VnbWVudFN0YXJ0RXZlbnQsXG4gIEJNRGVzdHJveUV2ZW50LFxuICBCTVJlbmRlckZyYW1lRXJyb3JFdmVudCxcbiAgQk1Db25maWdFcnJvckV2ZW50LFxuICBBbmltYXRpb25JdGVtLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgQW5pbWF0aW9uTG9hZGVyIH0gZnJvbSAnLi9hbmltYXRpb24tbG9hZGVyJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tsb3R0aWVdJyB9KVxuZXhwb3J0IGNsYXNzIEJhc2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICBASW5wdXQoKSBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zIHwgbnVsbCA9IG51bGw7XG5cbiAgQElucHV0KCkgY29udGFpbmVyQ2xhc3M6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIEBJbnB1dCgpIHN0eWxlczogUGFydGlhbDxDU1NTdHlsZURlY2xhcmF0aW9uPiB8IG51bGwgPSBudWxsO1xuXG4gIC8qKlxuICAgKiBgYW5pbWF0aW9uQ3JlYXRlZGAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjYWxsaW5nIGBsb2FkQW5pbWF0aW9uYFxuICAgKi9cbiAgQE91dHB1dCgpIGFuaW1hdGlvbkNyZWF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkl0ZW0+KCk7XG5cbiAgLyoqXG4gICAqIGBjb21wbGV0ZWAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjb21wbGV0aW5nIHRoZSBsYXN0IGZyYW1lXG4gICAqL1xuICBAT3V0cHV0KCkgY29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPEJNQ29tcGxldGVFdmVudD4oKTtcblxuICAvKipcbiAgICogYGxvb3BDb21wbGV0ZWAgaXMgZGlzcGF0Y2hlZCBhZnRlciBjb21wbGV0aW5nIGZyYW1lIGxvb3BcbiAgICovXG4gIEBPdXRwdXQoKSBsb29wQ29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyPEJNQ29tcGxldGVMb29wRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBlbnRlckZyYW1lYCBpcyBkaXNwYXRjaGVkIGFmdGVyIGVudGVyaW5nIHRoZSBuZXcgZnJhbWVcbiAgICovXG4gIEBPdXRwdXQoKSBlbnRlckZyYW1lID0gbmV3IEV2ZW50RW1pdHRlcjxCTUVudGVyRnJhbWVFdmVudD4oKTtcblxuICAvKipcbiAgICogYHNlZ21lbnRTdGFydGAgaXMgZGlzcGF0Y2hlZCB3aGVuIHRoZSBuZXcgc2VnbWVudCBpcyBhZGp1c3RlZFxuICAgKi9cbiAgQE91dHB1dCgpIHNlZ21lbnRTdGFydCA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1TZWdtZW50U3RhcnRFdmVudD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgY29uZmlnX3JlYWR5YC4gYGNvbmZpZ19yZWFkeWAgaXMgZGlzcGF0Y2hlZFxuICAgKiBhZnRlciB0aGUgbmVlZGVkIHJlbmRlcmVyIGlzIGNvbmZpZ3VyZWRcbiAgICovXG4gIEBPdXRwdXQoKSBjb25maWdSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgZGF0YV9yZWFkeWAuIGBkYXRhX3JlYWR5YCBpcyBkaXNwYXRjaGVkXG4gICAqIHdoZW4gYWxsIHBhcnRzIG9mIHRoZSBhbmltYXRpb24gaGF2ZSBiZWVuIGxvYWRlZFxuICAgKi9cbiAgQE91dHB1dCgpIGRhdGFSZWFkeSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvKipcbiAgICogT3JpZ2luYWwgZXZlbnQgbmFtZSBpcyBgRE9NTG9hZGVkYC4gYERPTUxvYWRlZGAgaXMgZGlzcGF0Y2hlZFxuICAgKiB3aGVuIGVsZW1lbnRzIGhhdmUgYmVlbiBhZGRlZCB0byB0aGUgRE9NXG4gICAqL1xuICBAT3V0cHV0KCkgZG9tTG9hZGVkID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gIC8qKlxuICAgKiBgZGVzdHJveWAgd2lsbCBiZSBkaXNwYXRjaGVkIGluIHRoZSBgbmdPbkRlc3Ryb3lgIGhvb2sgb2YgdGhlIHNlcnZpY2UsXG4gICAqIGl0J3MgdXNlZnVsIGZvciByZWxlYXNpbmcgcmVzb3VyY2VzXG4gICAqL1xuICBAT3V0cHV0KCkgZGVzdHJveSA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1EZXN0cm95RXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIGBlcnJvcmAgd2lsbCBiZSBkaXNwYXRjaGVkIGlmIHRoZSBsb3R0aWUgcGxheWVyIGNvdWxkIG5vdCByZW5kZXJcbiAgICogc29tZSBmcmFtZSBvciBwYXJzZSBjb25maWdcbiAgICovXG4gIEBPdXRwdXQoKSBlcnJvciA9IG5ldyBFdmVudEVtaXR0ZXI8Qk1SZW5kZXJGcmFtZUVycm9yRXZlbnQgfCBCTUNvbmZpZ0Vycm9yRXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb2FkZXI6IEFuaW1hdGlvbkxvYWRlcixcbiAgKSB7fVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuZGVzdHJveSQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBsb2FkQW5pbWF0aW9uKFxuICAgIGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMsXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBpbnN0YW5jZTogQmFzZURpcmVjdGl2ZSxcbiAgKTogdm9pZCB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSB8fCAhY2hhbmdlcy5vcHRpb25zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZXZlbnRzRmFjYWRlLmRlc3Ryb3lBbmltYXRpb24oKTtcblxuICAgIHRoaXMuYW5pbWF0aW9uTG9hZGVyLnJlc29sdmVMb2FkZXJBbmRMb2FkQW5pbWF0aW9uKFxuICAgICAgY2hhbmdlcy5vcHRpb25zLmN1cnJlbnRWYWx1ZSxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIGV2ZW50c0ZhY2FkZSxcbiAgICAgIHRoaXMuYW5pbWF0aW9uQ3JlYXRlZCxcbiAgICAgIGluc3RhbmNlLFxuICAgICAgdGhpcy5kZXN0cm95JCxcbiAgICApO1xuICB9XG59XG4iXX0=