/**
 * @fileoverview added by tsickle
 * Generated from: src/transfer-state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TransferState, makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class LottieTransferState {
    /**
     * @param {?} transferState
     */
    constructor(transferState) {
        this.transferState = transferState;
    }
    /**
     * @template T
     * @param {?} animation
     * @return {?}
     */
    get(animation) {
        /** @type {?} */
        const animationKey = transformAnimationFilenameToKey(animation);
        /** @type {?} */
        const stateKey = makeStateKey(animationKey);
        return this.transferState.get(stateKey, null);
    }
}
LottieTransferState.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
LottieTransferState.ctorParameters = () => [
    { type: TransferState }
];
/** @nocollapse */ LottieTransferState.ɵprov = i0.ɵɵdefineInjectable({ factory: function LottieTransferState_Factory() { return new LottieTransferState(i0.ɵɵinject(i1.TransferState)); }, token: LottieTransferState, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LottieTransferState.prototype.transferState;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXItc3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3JjL3RyYW5zZmVyLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBR3hFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O0FBRzFELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFDOUIsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDOzs7Ozs7SUFFcEQsR0FBRyxDQUFJLFNBQTRCOztjQUMzQixZQUFZLEdBQUcsK0JBQStCLENBQUMsU0FBUyxDQUFDOztjQUN6RCxRQUFRLEdBQUcsWUFBWSxDQUFJLFlBQVksQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7WUFSRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBTHpCLGFBQWE7Ozs7Ozs7O0lBT1IsNENBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSwgbWFrZVN0YXRlS2V5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkZpbGVuYW1lIH0gZnJvbSAnLi9zeW1ib2xzJztcbmltcG9ydCB7IHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkgfSBmcm9tICcuL3V0aWxzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBMb3R0aWVUcmFuc2ZlclN0YXRlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlKSB7fVxuXG4gIGdldDxUPihhbmltYXRpb246IEFuaW1hdGlvbkZpbGVuYW1lKTogVCB8IG51bGwge1xuICAgIGNvbnN0IGFuaW1hdGlvbktleSA9IHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkoYW5pbWF0aW9uKTtcbiAgICBjb25zdCBzdGF0ZUtleSA9IG1ha2VTdGF0ZUtleTxUPihhbmltYXRpb25LZXkpO1xuICAgIHJldHVybiB0aGlzLnRyYW5zZmVyU3RhdGUuZ2V0KHN0YXRlS2V5LCBudWxsKTtcbiAgfVxufVxuIl19