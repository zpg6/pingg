/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { takeUntil } from 'rxjs/operators';
import { LOTTIE_OPTIONS, ANIMATION_CACHE, } from './symbols';
import { awaitConfigAndCache, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';
export class AnimationLoader {
    /**
     * @param {?} ngZone
     * @param {?} platformId
     * @param {?} options
     * @param {?} animationCache
     */
    constructor(ngZone, platformId, options, animationCache) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.options = options;
        this.animationCache = animationCache;
        this.player$ = streamifyPlayerOrLoader(this.options.player);
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    resolveLoaderAndLoadAnimation(options, container, eventsFacade, animationCreated, instance, destroy$) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.player$.pipe(takeUntil(destroy$)).subscribe((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const mergedOptions = mergeOptionsWithDefault(options, container, this.animationCache);
            this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
        }));
    }
    /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    loadAnimation(player, options, eventsFacade, animationCreated, instance) {
        /** @type {?} */
        const animationItem = this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => player.loadAnimation((/** @type {?} */ (options)))));
        awaitConfigAndCache(this.animationCache, options, animationItem);
        // Dispatch `animationCreated` event after animation is loaded successfully
        animationCreated.emit(animationItem);
        eventsFacade.addEventListeners(instance, animationItem);
    }
}
AnimationLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationLoader.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [ANIMATION_CACHE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.player$;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.options;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.animationCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcmMvYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBT0wsY0FBYyxFQUNkLGVBQWUsR0FDaEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTWhHLE1BQU0sT0FBTyxlQUFlOzs7Ozs7O0lBRzFCLFlBQ1UsTUFBYyxFQUNPLFVBQWtCLEVBQ2YsT0FBc0IsRUFDckIsY0FBcUM7UUFIOUQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDZixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQU5oRSxZQUFPLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQU81RCxDQUFDOzs7Ozs7Ozs7O0lBRUosNkJBQTZCLENBQzNCLE9BQWdDLEVBQ2hDLFNBQXNCLEVBQ3RCLFlBQWdDLEVBQ2hDLGdCQUE2QyxFQUM3QyxRQUF1QixFQUN2QixRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUU7O2tCQUNsRCxhQUFhLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ3RGLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEYsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBRU8sYUFBYSxDQUNuQixNQUFvQixFQUNwQixPQUF5QixFQUN6QixZQUFnQyxFQUNoQyxnQkFBNkMsRUFDN0MsUUFBdUI7O2NBRWpCLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFLENBQ3ZELE1BQU0sQ0FBQyxhQUFhLENBQUMsbUJBQUEsT0FBTyxFQUFxRCxDQUFDLEVBQ25GO1FBQ0QsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDakUsMkVBQTJFO1FBQzNFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzFELENBQUM7OztZQTNDRixVQUFVOzs7O1lBckJVLE1BQU07eUNBMkJ0QixNQUFNLFNBQUMsV0FBVzs0Q0FDbEIsTUFBTSxTQUFDLGNBQWM7NENBQ3JCLE1BQU0sU0FBQyxlQUFlOzs7Ozs7O0lBTnpCLGtDQUErRDs7Ozs7SUFHN0QsaUNBQXNCOzs7OztJQUN0QixxQ0FBK0M7Ozs7O0lBQy9DLGtDQUFzRDs7Ozs7SUFDdEQseUNBQXNFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lLCBJbmplY3QsIEV2ZW50RW1pdHRlciwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1TZXJ2ZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gIExvdHRpZVBsYXllcixcbiAgTG90dGllT3B0aW9ucyxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICBMT1RUSUVfT1BUSU9OUyxcbiAgQU5JTUFUSU9OX0NBQ0hFLFxufSBmcm9tICcuL3N5bWJvbHMnO1xuaW1wb3J0IHsgYXdhaXRDb25maWdBbmRDYWNoZSwgbWVyZ2VPcHRpb25zV2l0aERlZmF1bHQsIHN0cmVhbWlmeVBsYXllck9yTG9hZGVyIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBCYXNlRGlyZWN0aXZlIH0gZnJvbSAnLi9iYXNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbmltYXRpb25DYWNoZSB9IGZyb20gJy4vYW5pbWF0aW9uLWNhY2hlJztcbmltcG9ydCB7IExvdHRpZUV2ZW50c0ZhY2FkZSB9IGZyb20gJy4vZXZlbnRzLWZhY2FkZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbmltYXRpb25Mb2FkZXIge1xuICBwcml2YXRlIHBsYXllciQgPSBzdHJlYW1pZnlQbGF5ZXJPckxvYWRlcih0aGlzLm9wdGlvbnMucGxheWVyKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogc3RyaW5nLFxuICAgIEBJbmplY3QoTE9UVElFX09QVElPTlMpIHByaXZhdGUgb3B0aW9uczogTG90dGllT3B0aW9ucyxcbiAgICBASW5qZWN0KEFOSU1BVElPTl9DQUNIRSkgcHJpdmF0ZSBhbmltYXRpb25DYWNoZTogQW5pbWF0aW9uQ2FjaGUgfCBudWxsLFxuICApIHt9XG5cbiAgcmVzb2x2ZUxvYWRlckFuZExvYWRBbmltYXRpb24oXG4gICAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwsXG4gICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25DcmVhdGVkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uSXRlbT4sXG4gICAgaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsXG4gICAgZGVzdHJveSQ6IFN1YmplY3Q8dm9pZD4sXG4gICk6IHZvaWQge1xuICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXllciQucGlwZSh0YWtlVW50aWwoZGVzdHJveSQpKS5zdWJzY3JpYmUocGxheWVyID0+IHtcbiAgICAgIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdChvcHRpb25zLCBjb250YWluZXIsIHRoaXMuYW5pbWF0aW9uQ2FjaGUpO1xuICAgICAgdGhpcy5sb2FkQW5pbWF0aW9uKHBsYXllciwgbWVyZ2VkT3B0aW9ucywgZXZlbnRzRmFjYWRlLCBhbmltYXRpb25DcmVhdGVkLCBpbnN0YW5jZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGxvYWRBbmltYXRpb24oXG4gICAgcGxheWVyOiBMb3R0aWVQbGF5ZXIsXG4gICAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyxcbiAgICBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25DcmVhdGVkOiBFdmVudEVtaXR0ZXI8QW5pbWF0aW9uSXRlbT4sXG4gICAgaW5zdGFuY2U6IEJhc2VEaXJlY3RpdmUsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGFuaW1hdGlvbkl0ZW0gPSB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PlxuICAgICAgcGxheWVyLmxvYWRBbmltYXRpb24ob3B0aW9ucyBhcyBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoKSxcbiAgICApO1xuICAgIGF3YWl0Q29uZmlnQW5kQ2FjaGUodGhpcy5hbmltYXRpb25DYWNoZSwgb3B0aW9ucywgYW5pbWF0aW9uSXRlbSk7XG4gICAgLy8gRGlzcGF0Y2ggYGFuaW1hdGlvbkNyZWF0ZWRgIGV2ZW50IGFmdGVyIGFuaW1hdGlvbiBpcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgYW5pbWF0aW9uQ3JlYXRlZC5lbWl0KGFuaW1hdGlvbkl0ZW0pO1xuICAgIGV2ZW50c0ZhY2FkZS5hZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZSwgYW5pbWF0aW9uSXRlbSk7XG4gIH1cbn1cbiJdfQ==