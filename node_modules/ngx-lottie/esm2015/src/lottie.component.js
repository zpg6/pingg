/**
 * @fileoverview added by tsickle
 * Generated from: src/lottie.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ChangeDetectionStrategy, Input, Inject, ElementRef, ViewChild, Self, PLATFORM_ID, } from '@angular/core';
import { BaseDirective } from './base.directive';
import { AnimationLoader } from './animation-loader';
import { LottieEventsFacade } from './events-facade';
export class LottieComponent extends BaseDirective {
    /**
     * @param {?} platformId
     * @param {?} eventsFacade
     * @param {?} animationLoader
     */
    constructor(platformId, eventsFacade, animationLoader) {
        super(platformId, animationLoader);
        this.eventsFacade = eventsFacade;
        this.width = null;
        this.height = null;
        this.container = (/** @type {?} */ (null));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.loadAnimation(changes, this.container.nativeElement, this.eventsFacade, this);
    }
}
LottieComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-lottie',
                template: `
    <div
      #container
      [style.width]="width || '100%'"
      [style.height]="height || '100%'"
      [ngStyle]="styles"
      [ngClass]="containerClass"
    ></div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [LottieEventsFacade]
            }] }
];
/** @nocollapse */
LottieComponent.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: LottieEventsFacade, decorators: [{ type: Self }] },
    { type: AnimationLoader }
];
LottieComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    container: [{ type: ViewChild, args: ['container', { static: true },] }]
};
if (false) {
    /** @type {?} */
    LottieComponent.prototype.width;
    /** @type {?} */
    LottieComponent.prototype.height;
    /** @type {?} */
    LottieComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    LottieComponent.prototype.eventsFacade;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG90dGllLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zcmMvbG90dGllLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBQ3ZCLEtBQUssRUFDTCxNQUFNLEVBQ04sVUFBVSxFQUNWLFNBQVMsRUFDVCxJQUFJLEVBQ0osV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFnQnJELE1BQU0sT0FBTyxlQUFnQixTQUFRLGFBQWE7Ozs7OztJQU1oRCxZQUN1QixVQUFrQixFQUN2QixZQUFnQyxFQUNoRCxlQUFnQztRQUVoQyxLQUFLLENBQUMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBSG5CLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtRQVB6QyxVQUFLLEdBQWtCLElBQUksQ0FBQztRQUM1QixXQUFNLEdBQWtCLElBQUksQ0FBQztRQUVJLGNBQVMsR0FBNEIsbUJBQUEsSUFBSSxFQUFDLENBQUM7SUFRckYsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RixDQUFDOzs7WUE5QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUU7Ozs7Ozs7O0dBUVQ7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07Z0JBQy9DLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO2FBQ2hDOzs7O3lDQVFJLE1BQU0sU0FBQyxXQUFXO1lBdkJkLGtCQUFrQix1QkF3QnRCLElBQUk7WUF6QkEsZUFBZTs7O29CQWtCckIsS0FBSztxQkFDTCxLQUFLO3dCQUVMLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7O0lBSHhDLGdDQUFxQzs7SUFDckMsaUNBQXNDOztJQUV0QyxvQ0FBcUY7Ozs7O0lBSW5GLHVDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIElucHV0LFxuICBJbmplY3QsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdDaGlsZCxcbiAgU2VsZixcbiAgUExBVEZPUk1fSUQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFuaW1hdGlvbkxvYWRlciB9IGZyb20gJy4vYW5pbWF0aW9uLWxvYWRlcic7XG5pbXBvcnQgeyBMb3R0aWVFdmVudHNGYWNhZGUgfSBmcm9tICcuL2V2ZW50cy1mYWNhZGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1sb3R0aWUnLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXZcbiAgICAgICNjb250YWluZXJcbiAgICAgIFtzdHlsZS53aWR0aF09XCJ3aWR0aCB8fCAnMTAwJSdcIlxuICAgICAgW3N0eWxlLmhlaWdodF09XCJoZWlnaHQgfHwgJzEwMCUnXCJcbiAgICAgIFtuZ1N0eWxlXT1cInN0eWxlc1wiXG4gICAgICBbbmdDbGFzc109XCJjb250YWluZXJDbGFzc1wiXG4gICAgPjwvZGl2PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgcHJvdmlkZXJzOiBbTG90dGllRXZlbnRzRmFjYWRlXSxcbn0pXG5leHBvcnQgY2xhc3MgTG90dGllQ29tcG9uZW50IGV4dGVuZHMgQmFzZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHdpZHRoOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgQElucHV0KCkgaGVpZ2h0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHN0YXRpYzogdHJ1ZSB9KSBjb250YWluZXI6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+ID0gbnVsbCE7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZDogc3RyaW5nLFxuICAgIEBTZWxmKCkgcHJpdmF0ZSBldmVudHNGYWNhZGU6IExvdHRpZUV2ZW50c0ZhY2FkZSxcbiAgICBhbmltYXRpb25Mb2FkZXI6IEFuaW1hdGlvbkxvYWRlcixcbiAgKSB7XG4gICAgc3VwZXIocGxhdGZvcm1JZCwgYW5pbWF0aW9uTG9hZGVyKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBzdXBlci5sb2FkQW5pbWF0aW9uKGNoYW5nZXMsIHRoaXMuY29udGFpbmVyLm5hdGl2ZUVsZW1lbnQsIHRoaXMuZXZlbnRzRmFjYWRlLCB0aGlzKTtcbiAgfVxufVxuIl19