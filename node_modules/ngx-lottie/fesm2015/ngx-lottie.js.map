{"version":3,"file":"ngx-lottie.js","sources":["../../src/src/symbols.ts","../../src/src/utils.ts","../../src/src/animation-loader.ts","../../src/src/base.directive.ts","../../src/src/animation-cache.ts","../../src/src/events-facade.ts","../../src/src/lottie.directive.ts","../../src/src/lottie.component.ts","../../src/src/lottie.module.ts","../../src/src/transfer-state.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { AnimationCache } from './animation-cache';\n\nexport interface BMEnterFrameEvent {\n  currentTime: number;\n  duration: number;\n  totalTime: number;\n  type: 'enterFrame';\n}\n\nexport interface BMCompleteLoopEvent {\n  type: 'loopComplete';\n  loop: number;\n  playCount: number;\n  frameMult: number;\n}\n\nexport interface BMCompleteEvent {\n  type: 'complete';\n  duration: number;\n}\n\nexport interface BMSegmentStartEvent {\n  type: 'segmentStart';\n  firstFrame: number;\n  totalFrames: number;\n}\n\nexport interface BMDestroyEvent {\n  target: AnimationItem;\n  type: 'destroy';\n}\n\nexport interface BMRenderFrameErrorEvent {\n  type: 'renderFrameError';\n  nativeError: Error;\n  currentTime: number;\n}\n\nexport interface BMConfigErrorEvent {\n  type: 'configError';\n  nativeError: Error;\n}\n\nexport type LottieEvent =\n  | BMEnterFrameEvent\n  | BMCompleteLoopEvent\n  | BMCompleteEvent\n  | BMSegmentStartEvent\n  | BMDestroyEvent\n  | BMRenderFrameErrorEvent\n  | BMConfigErrorEvent\n  | void;\n\nexport type CamelizedAnimationEventName =\n  | 'complete'\n  | 'loopComplete'\n  | 'enterFrame'\n  | 'segmentStart'\n  | 'configReady'\n  | 'dataReady'\n  | 'domLoaded'\n  | 'destroy'\n  | 'error';\n\nexport type EventsMap = { [key in CamelizedAnimationEventName]: AnimationEventName };\n\nexport type AnimationFilename = string;\nexport type AnimationEventName = import('lottie-web').AnimationEventName;\nexport type AnimationItem = import('lottie-web').AnimationItem;\nexport type LottiePlayer = typeof import('lottie-web').default;\n\n/**\n * @example\n * import player from 'lottie-web';\n * const factory = () => player;\n */\ntype LottiePlayerFactory = () => LottiePlayer;\n\n/**\n * @example\n * const factory = () => import('lottie-web');\n */\ntype LottieLoader = () => Promise<typeof import('lottie-web')>;\n\nexport type LottiePlayerFactoryOrLoader = LottiePlayerFactory | LottieLoader;\n\nexport interface LottieOptions {\n  player: LottiePlayerFactoryOrLoader;\n  useCache?: boolean;\n}\n\nexport type AnimationConfigWithData = import('lottie-web').AnimationConfigWithData;\nexport type AnimationConfigWithPath = import('lottie-web').AnimationConfigWithPath;\n\nexport type AnimationOptions = Partial<AnimationConfigWithData> | Partial<AnimationConfigWithPath>;\n\nexport const LOTTIE_OPTIONS = new InjectionToken<LottieOptions>('LottieOptions');\nexport const ANIMATION_CACHE = new InjectionToken<AnimationCache | null>('AnimationCache');\n","import { from, of, Observable } from 'rxjs';\nimport { map, publishReplay, refCount } from 'rxjs/operators';\n\nimport {\n  LottiePlayer,\n  AnimationOptions,\n  AnimationFilename,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  AnimationItem,\n  LottiePlayerFactoryOrLoader,\n} from './symbols';\nimport { AnimationCache } from './animation-cache';\n\nexport function transformAnimationFilenameToKey(animation: AnimationFilename): string {\n  return `animation-${animation.split('.json')[0]}`;\n}\n\nexport function mergeOptionsWithDefault(\n  options: AnimationOptions | null,\n  container: HTMLElement,\n  animationCache: AnimationCache | null,\n): AnimationConfigWithData | AnimationConfigWithPath {\n  const merged: AnimationConfigWithData | AnimationConfigWithPath = Object.assign(\n    {\n      container,\n      renderer: 'svg',\n      loop: true,\n      autoplay: true,\n    },\n    options,\n  );\n\n  return animationCache !== null ? animationCache.transformOptions(merged) : merged;\n}\n\nexport function awaitConfigAndCache(\n  animationCache: AnimationCache | null,\n  options: AnimationOptions,\n  animationItem: AnimationItem,\n): void {\n  if (animationCache === null) {\n    return;\n  }\n\n  animationItem.addEventListener('config_ready', () => {\n    animationCache.set(options, animationItem);\n  });\n}\n\nexport function streamifyPlayerOrLoader(\n  player: LottiePlayerFactoryOrLoader,\n): Observable<LottiePlayer> {\n  const playerOrLoader = player();\n\n  if (playerOrLoader instanceof Promise) {\n    return from(playerOrLoader).pipe(\n      map(module => module.default || module),\n      publishReplay(1),\n      refCount(),\n    );\n  } else {\n    return of(playerOrLoader);\n  }\n}\n","import { Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  LottiePlayer,\n  LottieOptions,\n  AnimationItem,\n  AnimationOptions,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  LOTTIE_OPTIONS,\n  ANIMATION_CACHE,\n} from './symbols';\nimport { awaitConfigAndCache, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';\nimport { BaseDirective } from './base.directive';\nimport { AnimationCache } from './animation-cache';\nimport { LottieEventsFacade } from './events-facade';\n\n@Injectable()\nexport class AnimationLoader {\n  private player$ = streamifyPlayerOrLoader(this.options.player);\n\n  constructor(\n    private ngZone: NgZone,\n    @Inject(PLATFORM_ID) private platformId: string,\n    @Inject(LOTTIE_OPTIONS) private options: LottieOptions,\n    @Inject(ANIMATION_CACHE) private animationCache: AnimationCache | null,\n  ) {}\n\n  resolveLoaderAndLoadAnimation(\n    options: AnimationOptions | null,\n    container: HTMLElement,\n    eventsFacade: LottieEventsFacade,\n    animationCreated: EventEmitter<AnimationItem>,\n    instance: BaseDirective,\n    destroy$: Subject<void>,\n  ): void {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    this.player$.pipe(takeUntil(destroy$)).subscribe(player => {\n      const mergedOptions = mergeOptionsWithDefault(options, container, this.animationCache);\n      this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);\n    });\n  }\n\n  private loadAnimation(\n    player: LottiePlayer,\n    options: AnimationOptions,\n    eventsFacade: LottieEventsFacade,\n    animationCreated: EventEmitter<AnimationItem>,\n    instance: BaseDirective,\n  ): void {\n    const animationItem = this.ngZone.runOutsideAngular(() =>\n      player.loadAnimation(options as AnimationConfigWithData | AnimationConfigWithPath),\n    );\n    awaitConfigAndCache(this.animationCache, options, animationItem);\n    // Dispatch `animationCreated` event after animation is loaded successfully\n    animationCreated.emit(animationItem);\n    eventsFacade.addEventListeners(instance, animationItem);\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  Inject,\n  PLATFORM_ID,\n  OnDestroy,\n  SimpleChanges,\n} from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Subject } from 'rxjs';\n\nimport {\n  AnimationOptions,\n  BMCompleteEvent,\n  BMCompleteLoopEvent,\n  BMEnterFrameEvent,\n  BMSegmentStartEvent,\n  BMDestroyEvent,\n  BMRenderFrameErrorEvent,\n  BMConfigErrorEvent,\n  AnimationItem,\n} from './symbols';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Directive({ selector: '[lottie]' })\nexport class BaseDirective implements OnDestroy {\n  @Input() options: AnimationOptions | null = null;\n\n  @Input() containerClass: string | null = null;\n\n  @Input() styles: Partial<CSSStyleDeclaration> | null = null;\n\n  /**\n   * `animationCreated` is dispatched after calling `loadAnimation`\n   */\n  @Output() animationCreated = new EventEmitter<AnimationItem>();\n\n  /**\n   * `complete` is dispatched after completing the last frame\n   */\n  @Output() complete = new EventEmitter<BMCompleteEvent>();\n\n  /**\n   * `loopComplete` is dispatched after completing frame loop\n   */\n  @Output() loopComplete = new EventEmitter<BMCompleteLoopEvent>();\n\n  /**\n   * `enterFrame` is dispatched after entering the new frame\n   */\n  @Output() enterFrame = new EventEmitter<BMEnterFrameEvent>();\n\n  /**\n   * `segmentStart` is dispatched when the new segment is adjusted\n   */\n  @Output() segmentStart = new EventEmitter<BMSegmentStartEvent>();\n\n  /**\n   * Original event name is `config_ready`. `config_ready` is dispatched\n   * after the needed renderer is configured\n   */\n  @Output() configReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `data_ready`. `data_ready` is dispatched\n   * when all parts of the animation have been loaded\n   */\n  @Output() dataReady = new EventEmitter<void>();\n\n  /**\n   * Original event name is `DOMLoaded`. `DOMLoaded` is dispatched\n   * when elements have been added to the DOM\n   */\n  @Output() domLoaded = new EventEmitter<void>();\n\n  /**\n   * `destroy` will be dispatched in the `ngOnDestroy` hook of the service,\n   * it's useful for releasing resources\n   */\n  @Output() destroy = new EventEmitter<BMDestroyEvent>();\n\n  /**\n   * `error` will be dispatched if the lottie player could not render\n   * some frame or parse config\n   */\n  @Output() error = new EventEmitter<BMRenderFrameErrorEvent | BMConfigErrorEvent>();\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: string,\n    private animationLoader: AnimationLoader,\n  ) {}\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected loadAnimation(\n    changes: SimpleChanges,\n    container: HTMLElement,\n    eventsFacade: LottieEventsFacade,\n    instance: BaseDirective,\n  ): void {\n    if (isPlatformServer(this.platformId) || !changes.options) {\n      return;\n    }\n\n    eventsFacade.destroyAnimation();\n\n    this.animationLoader.resolveLoaderAndLoadAnimation(\n      changes.options.currentValue,\n      container,\n      eventsFacade,\n      this.animationCreated,\n      instance,\n      this.destroy$,\n    );\n  }\n}\n","import {\n  LottieOptions,\n  AnimationItem,\n  AnimationConfigWithData,\n  AnimationConfigWithPath,\n  AnimationOptions,\n} from './symbols';\n\nexport class AnimationCache {\n  private cache = new Map<string, unknown>();\n\n  static create(options: LottieOptions): AnimationCache | null {\n    return options.useCache ? new AnimationCache() : null;\n  }\n\n  transformOptions(\n    options: AnimationConfigWithData | AnimationConfigWithPath,\n  ): AnimationConfigWithData | AnimationConfigWithPath {\n    const path = (options as AnimationConfigWithPath).path;\n    if (path && this.cache.has(path)) {\n      delete (options as AnimationConfigWithPath).path;\n      (options as AnimationConfigWithData).animationData = this.cache.get(path);\n    }\n    return options;\n  }\n\n  set(options: AnimationOptions, animationItem: AnimationItem): void {\n    const animationData = (options as AnimationConfigWithData).animationData;\n    if (animationData) {\n      return;\n    }\n\n    this.cache.set((options as AnimationConfigWithPath).path!, animationItem['animationData']);\n  }\n}\n","import { OnDestroy, Injectable, NgZone, Inject, EventEmitter, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { BaseDirective } from './base.directive';\nimport { EventsMap, LottieEvent, AnimationItem } from './symbols';\n\n/**\n * Returns only those `EventEmitter` instances that has attached observers\n */\nfunction getObservedEventEmitters(instance: BaseDirective, eventsMap: EventsMap) {\n  return (\n    Object.keys(instance)\n      // `Object.entries` is not supported in IE11.\n      .map(key => [key, instance[key]])\n      .filter(\n        ([key, property]) =>\n          property instanceof EventEmitter &&\n          property.observers.length > 0 &&\n          eventsMap.hasOwnProperty(key),\n      )\n      .map(([key, eventEmitter]) => ({\n        eventEmitter,\n        name: eventsMap[key],\n      }))\n  );\n}\n\n@Injectable()\nexport class LottieEventsFacade implements OnDestroy {\n  /**\n   * @see https://github.com/airbnb/lottie-web#events\n   */\n  private eventsMap: EventsMap = {\n    complete: 'complete',\n    loopComplete: 'loopComplete',\n    enterFrame: 'enterFrame',\n    segmentStart: 'segmentStart',\n    configReady: 'config_ready',\n    dataReady: 'data_ready',\n    domLoaded: 'DOMLoaded',\n    destroy: 'destroy',\n    error: 'error',\n  };\n\n  private animationItem: AnimationItem | null = null;\n\n  constructor(private ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: string) {}\n\n  ngOnDestroy(): void {\n    this.destroyAnimation();\n  }\n\n  addEventListeners(instance: BaseDirective, animationItem: AnimationItem): void {\n    this.animationItem = animationItem;\n    // `AnimationItem` triggers different events every ms, we have to listen\n    // them outside Angular's context, thus it won't affect performance\n    this.ngZone.runOutsideAngular(() => this.addEventListenersToObservedEventEmitters(instance));\n  }\n\n  destroyAnimation(): void {\n    // The `ng-lottie` component or the `lottie` directive can be destroyed\n    // before the `animationItem` is set, thus it will fail with\n    // `Cannot read property 'destroy' of null`.\n    // Potentially it can happen if the directive gets destroyed before change\n    // detection is run.\n    if (isPlatformServer(this.platformId) || this.animationItem === null) {\n      return;\n    }\n\n    // `destroy()` will remove all events listeners\n    this.animationItem.destroy();\n    this.animationItem = null;\n  }\n\n  private addEventListenersToObservedEventEmitters(instance: BaseDirective): void {\n    const observedEmitters = getObservedEventEmitters(instance, this.eventsMap);\n\n    for (const { name, eventEmitter } of observedEmitters) {\n      this.animationItem!.addEventListener(name, (event: LottieEvent) => {\n        eventEmitter.emit(event);\n      });\n    }\n  }\n}\n","import {\n  Directive,\n  Inject,\n  Self,\n  ElementRef,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Directive({\n  selector: '[lottie]',\n  providers: [LottieEventsFacade],\n})\nexport class LottieDirective extends BaseDirective implements OnChanges {\n  constructor(\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private host: ElementRef<HTMLElement>,\n    @Self() private eventsFacade: LottieEventsFacade,\n    animationLoader: AnimationLoader,\n  ) {\n    super(platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.host.nativeElement, this.eventsFacade, this);\n  }\n}\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  Input,\n  Inject,\n  ElementRef,\n  ViewChild,\n  Self,\n  PLATFORM_ID,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieEventsFacade } from './events-facade';\n\n@Component({\n  selector: 'ng-lottie',\n  template: `\n    <div\n      #container\n      [style.width]=\"width || '100%'\"\n      [style.height]=\"height || '100%'\"\n      [ngStyle]=\"styles\"\n      [ngClass]=\"containerClass\"\n    ></div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [LottieEventsFacade],\n})\nexport class LottieComponent extends BaseDirective implements OnChanges {\n  @Input() width: string | null = null;\n  @Input() height: string | null = null;\n\n  @ViewChild('container', { static: true }) container: ElementRef<HTMLElement> = null!;\n\n  constructor(\n    @Inject(PLATFORM_ID) platformId: string,\n    @Self() private eventsFacade: LottieEventsFacade,\n    animationLoader: AnimationLoader,\n  ) {\n    super(platformId, animationLoader);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.loadAnimation(changes, this.container.nativeElement, this.eventsFacade, this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BaseDirective } from './base.directive';\nimport { AnimationCache } from './animation-cache';\nimport { AnimationLoader } from './animation-loader';\nimport { LottieDirective } from './lottie.directive';\nimport { LottieComponent } from './lottie.component';\nimport { LottieOptions, LOTTIE_OPTIONS, ANIMATION_CACHE } from './symbols';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BaseDirective, LottieDirective, LottieComponent],\n  exports: [BaseDirective, LottieDirective, LottieComponent],\n})\nexport class LottieModule {\n  static forRoot(options: LottieOptions): ModuleWithProviders<LottieModule> {\n    return {\n      ngModule: LottieModule,\n      providers: [\n        AnimationLoader,\n        {\n          provide: LOTTIE_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: ANIMATION_CACHE,\n          useFactory: AnimationCache.create,\n          deps: [LOTTIE_OPTIONS],\n        },\n      ],\n    };\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TransferState, makeStateKey } from '@angular/platform-browser';\n\nimport { AnimationFilename } from './symbols';\nimport { transformAnimationFilenameToKey } from './utils';\n\n@Injectable({ providedIn: 'root' })\nexport class LottieTransferState {\n  constructor(private transferState: TransferState) {}\n\n  get<T>(animation: AnimationFilename): T | null {\n    const animationKey = transformAnimationFilenameToKey(animation);\n    const stateKey = makeStateKey<T>(animationKey);\n    return this.transferState.get(stateKey, null);\n  }\n}\n"],"names":[],"mappings":"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"}