{"version":3,"file":"google-maps-api-wrapper.d.ts","sources":["google-maps-api-wrapper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"googlemaps\" />\nimport { NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\nexport declare class GoogleMapsAPIWrapper {\n    private _loader;\n    private _zone;\n    private _map;\n    private _mapResolver;\n    constructor(_loader: MapsAPILoader, _zone: NgZone);\n    createMap(el: HTMLElement, mapOptions: google.maps.MapOptions): Promise<void>;\n    setMapOptions(options: google.maps.MapOptions): void;\n    /**\n     * Creates a google map marker with the map context\n     */\n    createMarker(options?: google.maps.MarkerOptions, addToMap?: boolean): Promise<google.maps.Marker>;\n    createInfoWindow(options?: google.maps.InfoWindowOptions): Promise<google.maps.InfoWindow>;\n    /**\n     * Creates a google.map.Circle for the current map.\n     */\n    createCircle(options: google.maps.CircleOptions): Promise<google.maps.Circle>;\n    /**\n     * Creates a google.map.Rectangle for the current map.\n     */\n    createRectangle(options: google.maps.RectangleOptions): Promise<google.maps.Rectangle>;\n    createPolyline(options: google.maps.PolylineOptions): Promise<google.maps.Polyline>;\n    createPolygon(options: google.maps.PolygonOptions): Promise<google.maps.Polygon>;\n    /**\n     * Creates a new google.map.Data layer for the current map\n     */\n    createDataLayer(options?: google.maps.Data.DataOptions): Promise<google.maps.Data>;\n    /**\n     * Creates a TransitLayer instance for a map\n     * @returns a new transit layer object\n     */\n    createTransitLayer(): Promise<google.maps.TransitLayer>;\n    /**\n     * Creates a BicyclingLayer instance for a map\n     * @returns a new bicycling layer object\n     */\n    createBicyclingLayer(): Promise<google.maps.BicyclingLayer>;\n    /**\n     * Determines if given coordinates are insite a Polygon path.\n     */\n    containsLocation(latLng: google.maps.LatLng, polygon: google.maps.Polygon): Promise<boolean>;\n    subscribeToMapEvent<N extends keyof google.maps.MapHandlerMap>(eventName: N): Observable<google.maps.MapHandlerMap[N]>;\n    clearInstanceListeners(): void;\n    setCenter(latLng: google.maps.LatLngLiteral): Promise<void>;\n    getZoom(): Promise<number>;\n    getBounds(): Promise<google.maps.LatLngBounds>;\n    getMapTypeId(): Promise<google.maps.MapTypeId>;\n    setZoom(zoom: number): Promise<void>;\n    getCenter(): Promise<google.maps.LatLng>;\n    panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): Promise<void>;\n    panBy(x: number, y: number): Promise<void>;\n    fitBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void>;\n    panToBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void>;\n    /**\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n     */\n    getNativeMap(): Promise<google.maps.Map>;\n    /**\n     * Triggers the given event name on the map instance.\n     */\n    triggerMapEvent(eventName: string): Promise<void>;\n}\n"]}