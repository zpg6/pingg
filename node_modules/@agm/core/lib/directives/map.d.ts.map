{"version":3,"file":"map.d.ts","sources":["map.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"googlemaps\" />\nimport { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';\nimport { FitBoundsService } from '../services/fit-bounds';\nimport { GoogleMapsAPIWrapper } from '../services/google-maps-api-wrapper';\nexport declare type ControlPosition = keyof typeof google.maps.ControlPosition;\nexport declare abstract class AgmMapControl {\n    position: ControlPosition;\n    abstract getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmFullscreenControl extends AgmMapControl {\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmMapTypeControl extends AgmMapControl {\n    mapTypeIds: (keyof typeof google.maps.MapTypeId)[];\n    style: keyof typeof google.maps.MapTypeControlStyle;\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmPanControl extends AgmMapControl {\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmRotateControl extends AgmMapControl {\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmScaleControl extends AgmMapControl {\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmStreetViewControl extends AgmMapControl {\n    getOptions(): Partial<google.maps.MapOptions>;\n}\nexport declare class AgmZoomControl extends AgmMapControl {\n    style: keyof typeof google.maps.ZoomControlStyle;\n    getOptions(): Partial<google.maps.MapOptions>;\n}\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\nexport declare class AgmMap implements OnChanges, AfterContentInit, OnDestroy {\n    private _elem;\n    private _mapsWrapper;\n    private _platformId;\n    protected _fitBoundsService: FitBoundsService;\n    private _zone;\n    /**\n     * The longitude that defines the center of the map.\n     */\n    longitude: number;\n    /**\n     * The latitude that defines the center of the map.\n     */\n    latitude: number;\n    /**\n     * The zoom level of the map. The default zoom level is 8.\n     */\n    zoom: number;\n    /**\n     * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n     * are enforced.\n     */\n    minZoom: number;\n    /**\n     * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n     * are enforced.\n     */\n    maxZoom: number;\n    /**\n     * The control size for the default map controls. Only governs the controls made by the Maps API itself\n     */\n    controlSize: number;\n    /**\n     * Enables/disables if map is draggable.\n     */\n    draggable: boolean;\n    /**\n     * Enables/disables zoom and center on double click. Enabled by default.\n     */\n    disableDoubleClickZoom: boolean;\n    /**\n     * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n     * value cannot get updated.\n     */\n    disableDefaultUI: boolean;\n    /**\n     * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n     */\n    scrollwheel: boolean;\n    /**\n     * Color used for the background of the Map div. This color will be visible when tiles have not\n     * yet loaded as the user pans. This option can only be set when the map is initialized.\n     */\n    backgroundColor: string;\n    /**\n     * The name or url of the cursor to display when mousing over a draggable map. This property uses\n     * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n     * least one fallback cursor that is not a URL. For example:\n     * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n     */\n    draggableCursor: string;\n    /**\n     * The name or url of the cursor to display when the map is being dragged. This property uses the\n     * css cursor attribute to change the icon. As with the css property, you must specify at least\n     * one fallback cursor that is not a URL. For example:\n     * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n     */\n    draggingCursor: string;\n    /**\n     * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n     * enabled by default.\n     */\n    keyboardShortcuts: boolean;\n    /**\n     * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n     * modes, these styles will only apply to labels and geometry.\n     */\n    styles: google.maps.MapTypeStyle[];\n    /**\n     * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n     * used to\n     * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n     */\n    usePanning: boolean;\n    /**\n     * Sets the viewport to contain the given bounds.\n     * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n     */\n    fitBounds: google.maps.LatLngBoundsLiteral | google.maps.LatLngBounds | boolean;\n    /**\n     * Padding amount for the bounds.\n     */\n    fitBoundsPadding: number | google.maps.Padding;\n    /**\n     * The map mapTypeId. Defaults to 'roadmap'.\n     */\n    mapTypeId: keyof typeof google.maps.MapTypeId;\n    /**\n     * When false, map icons are not clickable. A map icon represents a point of interest,\n     * also known as a POI. By default map icons are clickable.\n     */\n    clickableIcons: boolean;\n    /**\n     * A map icon represents a point of interest, also known as a POI.\n     * When map icons are clickable by default, an info window is displayed.\n     * When this property is set to false, the info window will not be shown but the click event\n     * will still fire\n     */\n    showDefaultInfoWindow: boolean;\n    /**\n     * This setting controls how gestures on the map are handled.\n     * Allowed values:\n     * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n     * - 'greedy'      (All touch gestures pan or zoom the map.)\n     * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n     * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n     */\n    gestureHandling: google.maps.GestureHandlingOptions;\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0째 overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45째 imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45째 imagery is not available\n     * (this is the default behavior). 45째 imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n    tilt: number;\n    /**\n     * Options for restricting the bounds of the map.\n     * User cannot pan or zoom away from restricted area.\n     */\n    restriction: google.maps.MapRestriction;\n    /**\n     * Map option attributes that can change over time\n     */\n    private static _mapOptionsAttributes;\n    private _observableSubscriptions;\n    private _fitBoundsSubscription;\n    /**\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n     * marker or infoWindow).\n     */\n    mapClick: EventEmitter<google.maps.MouseEvent | google.maps.IconMouseEvent>;\n    /**\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n    mapRightClick: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n     * on a marker or infoWindow).\n     */\n    mapDblClick: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event emitter is fired when the map center changes.\n     */\n    centerChange: EventEmitter<google.maps.LatLngLiteral>;\n    /**\n     * This event is fired when the viewport bounds have changed.\n     */\n    boundsChange: EventEmitter<google.maps.LatLngBounds>;\n    /**\n     * This event is fired when the mapTypeId property changes.\n     */\n    mapTypeIdChange: EventEmitter<google.maps.MapTypeId>;\n    /**\n     * This event is fired when the map becomes idle after panning or zooming.\n     */\n    idle: EventEmitter<void>;\n    /**\n     * This event is fired when the zoom level has changed.\n     */\n    zoomChange: EventEmitter<number>;\n    /**\n     * This event is fired when the google map is fully initialized.\n     * You get the google.maps.Map instance as a result of this EventEmitter.\n     */\n    mapReady: EventEmitter<any>;\n    /**\n     * This event is fired when the visible tiles have finished loading.\n     */\n    tilesLoaded: EventEmitter<void>;\n    mapControls: QueryList<AgmMapControl>;\n    constructor(_elem: ElementRef, _mapsWrapper: GoogleMapsAPIWrapper, _platformId: Object, _fitBoundsService: FitBoundsService, _zone: NgZone);\n    /** @internal */\n    ngAfterContentInit(): void;\n    private _initMapInstance;\n    /** @internal */\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    private _updateMapOptionsChanges;\n    /**\n     * Triggers a resize event on the google map instance.\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n     * Returns a promise that gets resolved after the event was triggered.\n     */\n    triggerResize(recenter?: boolean): Promise<void>;\n    private _updatePosition;\n    private _setCenter;\n    private _fitBounds;\n    private _subscribeToFitBoundsUpdates;\n    protected _updateBounds(bounds: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): void;\n    private _isLatLngBoundsLiteral;\n    private _handleMapCenterChange;\n    private _handleBoundsChange;\n    private _handleMapTypeIdChange;\n    private _handleMapZoomChange;\n    private _handleIdleEvent;\n    private _handleTilesLoadedEvent;\n    private _handleMapMouseEvents;\n    _handleControlChange(): void;\n    _setControls(): void;\n}\n"]}