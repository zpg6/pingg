{"version":3,"file":"polyline-icon.d.ts","sources":["polyline-icon.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/// <reference types=\"googlemaps\" />\nimport { OnInit } from '@angular/core';\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n */\nexport declare class AgmPolylineIcon implements OnInit {\n    /**\n     * If `true`, each icon in the sequence has the same fixed rotation regardless of the\n     * angle of the edge on which it lies. Defaults to `false`, in which case each icon\n     * in the sequence is rotated to align with its edge.\n     */\n    fixedRotation: boolean;\n    /**\n     * The distance from the start of the line at which an icon is to be rendered. This\n     * distance may be expressed as a percentage of line's length (e.g. '50%') or in pixels\n     * (e.g. '50px'). Defaults to '100%'.\n     */\n    offset: string;\n    /**\n     * The distance between consecutive icons on the line. This distance may be expressed as\n     * a percentage of the line's length (e.g. '50%') or in pixels (e.g. '50px'). To disable\n     * repeating of the icon, specify '0'. Defaults to '0'.\n     */\n    repeat: string;\n    /**\n     * The x coordinate of the position of the symbol relative to the polyline. The coordinate\n     * of the symbol's path is translated _left_ by the anchor's x coordinate. By default, a\n     * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n     * symbol's path.\n     */\n    anchorX: number;\n    /**\n     * The y coordinate of the position of the symbol relative to the polyline. The coordinate\n     * of the symbol's path is translated _up_ by the anchor's y coordinate. By default, a\n     * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n     * symbol's path.\n     */\n    anchorY: number;\n    /**\n     * The symbol's fill color. All CSS3 colors are supported except for extended named\n     * colors. Defaults to the stroke color of the corresponding polyline.\n     */\n    fillColor: string;\n    /**\n     * The symbol's fill opacity. Defaults to 0.\n     */\n    fillOpacity: number;\n    /**\n     * The symbol's path, which is a built-in symbol path, or a custom path expressed using\n     * SVG path notation. Required.\n     */\n    path: keyof typeof google.maps.SymbolPath | string;\n    /**\n     * The angle by which to rotate the symbol, expressed clockwise in degrees.\n     * Defaults to 0. A symbol where `fixedRotation` is `false` is rotated relative to\n     * the angle of the edge on which it lies.\n     */\n    rotation: number;\n    /**\n     * The amount by which the symbol is scaled in size. Defaults to the stroke weight\n     * of the polyline; after scaling, the symbol must lie inside a square 22 pixels in\n     * size centered at the symbol's anchor.\n     */\n    scale: number;\n    /**\n     * The symbol's stroke color. All CSS3 colors are supported except for extended named\n     * colors. Defaults to the stroke color of the polyline.\n     */\n    strokeColor: string;\n    /**\n     * The symbol's stroke opacity. Defaults to the stroke opacity of the polyline.\n     */\n    strokeOpacity: number;\n    /**\n     * The symbol's stroke weight. Defaults to the scale of the symbol.\n     */\n    strokeWeight: number;\n    ngOnInit(): void;\n}\n"]}