{"version":3,"file":"polyline.d.ts","sources":["polyline.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"googlemaps\" />\nimport { AfterContentInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { MVCEvent } from '../utils/mvcarray-utils';\nimport { AgmPolylineIcon } from './polyline-icon';\nimport { AgmPolylinePoint } from './polyline-point';\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nexport declare class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\n    private _polylineManager;\n    /**\n     * Indicates whether this Polyline handles mouse events. Defaults to true.\n     */\n    clickable: boolean;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic property defines the\n     * mode of dragging. Defaults to false.\n     */\n    draggable: boolean;\n    /**\n     * If set to true, the user can edit this shape by dragging the control points shown at the\n     * vertices and on each segment. Defaults to false.\n     */\n    editable: boolean;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n     * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n     * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n    geodesic: boolean;\n    /**\n     * The stroke color. All CSS3 colors are supported except for extended named colors.\n     */\n    strokeColor: string;\n    /**\n     * The stroke opacity between 0.0 and 1.0.\n     */\n    strokeOpacity: number;\n    /**\n     * The stroke width in pixels.\n     */\n    strokeWeight: number;\n    /**\n     * Whether this polyline is visible on the map. Defaults to true.\n     */\n    visible: boolean;\n    /**\n     * The zIndex compared to other polys.\n     */\n    zIndex: number;\n    /**\n     * This event is fired when the DOM click event is fired on the Polyline.\n     */\n    lineClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\n     */\n    lineDblClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is repeatedly fired while the user drags the polyline.\n     */\n    lineDrag: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user stops dragging the polyline.\n     */\n    lineDragEnd: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user starts dragging the polyline.\n     */\n    lineDragStart: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\n     */\n    lineMouseDown: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\n     */\n    lineMouseMove: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired on Polyline mouseout.\n     */\n    lineMouseOut: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired on Polyline mouseover.\n     */\n    lineMouseOver: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\n     */\n    lineMouseUp: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the Polyline is right-clicked on.\n     */\n    lineRightClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired after Polyline's path changes.\n     */\n    polyPathChange: EventEmitter<MVCEvent<google.maps.LatLng>>;\n    /**\n     * @internal\n     */\n    points: QueryList<AgmPolylinePoint>;\n    iconSequences: QueryList<AgmPolylineIcon>;\n    private static _polylineOptionsAttributes;\n    private _id;\n    private _polylineAddedToManager;\n    private _subscriptions;\n    constructor(_polylineManager: PolylineManager);\n    /** @internal */\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): any;\n    getPath(): Promise<google.maps.LatLng[]>;\n    private _init;\n    private _addEventListeners;\n    /** @internal */\n    _getPoints(): AgmPolylinePoint[];\n    _getIcons(): Array<AgmPolylineIcon>;\n    /** @internal */\n    id(): string;\n    /** @internal */\n    ngOnDestroy(): void;\n}\n"]}