{"version":3,"file":"rectangle.d.ts","sources":["rectangle.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"googlemaps\" />\nimport { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\nexport declare class AgmRectangle implements OnInit, OnChanges, OnDestroy {\n    private _manager;\n    /**\n     * The north position of the rectangle (required).\n     */\n    north: number;\n    /**\n     * The east position of the rectangle (required).\n     */\n    east: number;\n    /**\n     * The south position of the rectangle (required).\n     */\n    south: number;\n    /**\n     * The west position of the rectangle (required).\n     */\n    west: number;\n    /**\n     * Indicates whether this Rectangle handles mouse events. Defaults to true.\n     */\n    clickable: boolean;\n    /**\n     * If set to true, the user can drag this rectangle over the map. Defaults to false.\n     */\n    draggable: boolean;\n    /**\n     * If set to true, the user can edit this rectangle by dragging the control points shown at\n     * the center and around the circumference of the rectangle. Defaults to false.\n     */\n    editable: boolean;\n    /**\n     * The fill color. All CSS3 colors are supported except for extended named colors.\n     */\n    fillColor: string;\n    /**\n     * The fill opacity between 0.0 and 1.0.\n     */\n    fillOpacity: number;\n    /**\n     * The stroke color. All CSS3 colors are supported except for extended named colors.\n     */\n    strokeColor: string;\n    /**\n     * The stroke opacity between 0.0 and 1.0\n     */\n    strokeOpacity: number;\n    /**\n     * The stroke position. Defaults to CENTER.\n     * This property is not supported on Internet Explorer 8 and earlier.\n     */\n    strokePosition: keyof typeof google.maps.StrokePosition;\n    /**\n     * The stroke width in pixels.\n     */\n    strokeWeight: number;\n    /**\n     * Whether this rectangle is visible on the map. Defaults to true.\n     */\n    visible: boolean;\n    /**\n     * The zIndex compared to other polys.\n     */\n    zIndex: number;\n    /**\n     * This event is fired when the rectangle's is changed.\n     */\n    boundsChange: EventEmitter<google.maps.LatLngBoundsLiteral>;\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n    rectangleClick: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event emitter gets emitted when the user clicks on the rectangle.\n     */\n    rectangleDblClick: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is repeatedly fired while the user drags the rectangle.\n     */\n    drag: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user stops dragging the rectangle.\n     */\n    dragEnd: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user starts dragging the rectangle.\n     */\n    dragStart: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the DOM mousedown event is fired on the rectangle.\n     */\n    mouseDown: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the DOM mousemove event is fired on the rectangle.\n     */\n    mouseMove: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired on rectangle mouseout.\n     */\n    mouseOut: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired on rectangle mouseover.\n     */\n    mouseOver: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the DOM mouseup event is fired on the rectangle.\n     */\n    mouseUp: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the rectangle is right-clicked on.\n     */\n    rightClick: EventEmitter<google.maps.MouseEvent>;\n    private _rectangleAddedToManager;\n    private static _mapOptions;\n    private _eventSubscriptions;\n    constructor(_manager: RectangleManager);\n    /** @internal */\n    ngOnInit(): void;\n    /** @internal */\n    ngOnChanges(changes: {\n        [key: string]: SimpleChange;\n    }): void;\n    private _updateRectangleOptionsChanges;\n    private _registerEventListeners;\n    /** @internal */\n    ngOnDestroy(): void;\n    /**\n     * Gets the LatLngBounds of this Rectangle.\n     */\n    getBounds(): Promise<google.maps.LatLngBounds>;\n}\n"]}