{"version":3,"file":"marker.d.ts","sources":["marker.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"googlemaps\" />\nimport { AfterContentInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChange } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { AgmInfoWindow } from './info-window';\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nexport declare class AgmMarker implements OnDestroy, OnChanges, AfterContentInit, FitBoundsAccessor {\n    private _markerManager;\n    /**\n     * The latitude position of the marker.\n     */\n    latitude: number;\n    /**\n     * The longitude position of the marker.\n     */\n    longitude: number;\n    /**\n     * The title of the marker.\n     */\n    title: string;\n    /**\n     * The label (a single uppercase character) for the marker.\n     */\n    label: string | google.maps.MarkerLabel;\n    /**\n     * If true, the marker can be dragged. Default value is false.\n     */\n    draggable: boolean;\n    /**\n     * Icon (the URL of the image) for the foreground.\n     */\n    iconUrl: string | google.maps.Icon | google.maps.Symbol;\n    /**\n     * If true, the marker is visible\n     */\n    visible: boolean;\n    /**\n     * Whether to automatically open the child info window when the marker is clicked.\n     */\n    openInfoWindow: boolean;\n    /**\n     * The marker's opacity between 0.0 and 1.0.\n     */\n    opacity: number;\n    /**\n     * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n     * front of markers with lower values. By default, markers are displayed according to their\n     * vertical position on screen, with lower markers appearing in front of markers further up the\n     * screen.\n     */\n    zIndex: number;\n    /**\n     * If true, the marker can be clicked. Default value is true.\n     */\n    clickable: boolean;\n    /**\n     * Which animation to play when marker is added to a map.\n     * This can be 'BOUNCE' or 'DROP'\n     */\n    animation: keyof typeof google.maps.Animation;\n    /**\n     * This event is fired when the marker's animation property changes.\n     */\n    animationChange: EventEmitter<\"BOUNCE\" | \"DROP\">;\n    /**\n     * This event emitter gets emitted when the user clicks on the marker.\n     */\n    markerClick: EventEmitter<AgmMarker>;\n    /**\n     * This event emitter gets emitted when the user clicks twice on the marker.\n     */\n    markerDblClick: EventEmitter<AgmMarker>;\n    /**\n     * This event is fired when the user rightclicks on the marker.\n     */\n    markerRightClick: EventEmitter<void>;\n    /**\n     * This event is fired when the user starts dragging the marker.\n     */\n    dragStart: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is repeatedly fired while the user drags the marker.\n     */\n    drag: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user stops dragging the marker.\n     */\n    dragEnd: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user mouses over the marker.\n     */\n    mouseOver: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user mouses outside the marker.\n     */\n    mouseOut: EventEmitter<google.maps.MouseEvent>;\n    /** @internal */\n    infoWindow: QueryList<AgmInfoWindow>;\n    private _markerAddedToManger;\n    private _id;\n    private _observableSubscriptions;\n    protected readonly _fitBoundsDetails$: ReplaySubject<FitBoundsDetails>;\n    constructor(_markerManager: MarkerManager);\n    ngAfterContentInit(): void;\n    private handleInfoWindowUpdate;\n    /** @internal */\n    ngOnChanges(changes: {\n        [key: string]: SimpleChange;\n    }): void;\n    /** @internal */\n    getFitBoundsDetails$(): Observable<FitBoundsDetails>;\n    protected _updateFitBoundsDetails(): void;\n    private _addEventListeners;\n    /** @internal */\n    id(): string;\n    /** @internal */\n    toString(): string;\n    /** @internal */\n    ngOnDestroy(): void;\n}\n"]}