{"version":3,"file":"info-window.d.ts","sources":["info-window.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\nimport { AgmMarker } from './marker';\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\nexport declare class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\n    private _infoWindowManager;\n    private _el;\n    /**\n     * The latitude position of the info window (only usefull if you use it ouside of a {@link\n     * AgmMarker}).\n     */\n    latitude: number;\n    /**\n     * The longitude position of the info window (only usefull if you use it ouside of a {@link\n     * AgmMarker}).\n     */\n    longitude: number;\n    /**\n     * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n     * visible when it opens.\n     */\n    disableAutoPan: boolean;\n    /**\n     * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n     * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n     * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n     * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n     */\n    zIndex: number;\n    /**\n     * Maximum width of the infowindow, regardless of content's width. This value is only considered\n     * if it is set before a call to open. To change the maximum width when changing content, call\n     * close, update maxWidth, and then open.\n     */\n    maxWidth: number;\n    /**\n     * Holds the marker that is the host of the info window (if available)\n     */\n    hostMarker: AgmMarker;\n    /**\n     * Holds the native element that is used for the info window content.\n     */\n    content: Node;\n    /**\n     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n     */\n    isOpen: boolean;\n    /**\n     * Emits an event when the info window is closed.\n     */\n    infoWindowClose: EventEmitter<void>;\n    private static _infoWindowOptionsInputs;\n    private _infoWindowAddedToManager;\n    private _id;\n    constructor(_infoWindowManager: InfoWindowManager, _el: ElementRef);\n    ngOnInit(): void;\n    /** @internal */\n    ngOnChanges(changes: {\n        [key: string]: SimpleChange;\n    }): void;\n    private _registerEventListeners;\n    private _updateOpenState;\n    private _setInfoWindowOptions;\n    /**\n     * Opens the info window.\n     */\n    open(): Promise<void>;\n    /**\n     * Closes the info window.\n     */\n    close(): Promise<void>;\n    /** @internal */\n    id(): string;\n    /** @internal */\n    toString(): string;\n    /** @internal */\n    ngOnDestroy(): void;\n}\n"]}