{"version":3,"file":"polygon.d.ts","sources":["polygon.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"googlemaps\" />\nimport { AfterContentInit, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { MVCEvent } from '../utils/mvcarray-utils';\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: LatLngLiteral[] = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: LatLngLiteral[][] = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\nexport declare class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\n    private _polygonManager;\n    /**\n     * Indicates whether this Polygon handles mouse events. Defaults to true.\n     */\n    clickable: boolean;\n    /**\n     * If set to true, the user can drag this shape over the map. The geodesic\n     * property defines the mode of dragging. Defaults to false.\n     */\n    draggable: boolean;\n    /**\n     * If set to true, the user can edit this shape by dragging the control\n     * points shown at the vertices and on each segment. Defaults to false.\n     */\n    editable: boolean;\n    /**\n     * The fill color. All CSS3 colors are supported except for extended\n     * named colors.\n     */\n    fillColor: string;\n    /**\n     * The fill opacity between 0.0 and 1.0\n     */\n    fillOpacity: number;\n    /**\n     * When true, edges of the polygon are interpreted as geodesic and will\n     * follow the curvature of the Earth. When false, edges of the polygon are\n     * rendered as straight lines in screen space. Note that the shape of a\n     * geodesic polygon may appear to change when dragged, as the dimensions\n     * are maintained relative to the surface of the earth. Defaults to false.\n     */\n    geodesic: boolean;\n    /**\n     * The ordered sequence of coordinates that designates a closed loop.\n     * Unlike polylines, a polygon may consist of one or more paths.\n     *  As a result, the paths property may specify one or more arrays of\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\n     * first vertex of the path as the last vertex. Simple polygons may be\n     * defined using a single array of LatLngs. More complex polygons may\n     * specify an array of arrays. Any simple arrays are converted into Arrays.\n     * Inserting or removing LatLngs from the Array will automatically update\n     * the polygon on the map.\n     */\n    paths: google.maps.LatLng[] | google.maps.LatLng[][] | google.maps.MVCArray<google.maps.LatLng> | google.maps.MVCArray<google.maps.MVCArray<google.maps.LatLng>> | google.maps.LatLngLiteral[] | google.maps.LatLngLiteral[][];\n    /**\n     * The stroke color. All CSS3 colors are supported except for extended\n     * named colors.\n     */\n    strokeColor: string;\n    /**\n     * The stroke opacity between 0.0 and 1.0\n     */\n    strokeOpacity: number;\n    /**\n     * The stroke width in pixels.\n     */\n    strokeWeight: number;\n    /**\n     * Whether this polygon is visible on the map. Defaults to true.\n     */\n    visible: boolean;\n    /**\n     * The zIndex compared to other polys.\n     */\n    zIndex: number;\n    /**\n     * This event is fired when the DOM click event is fired on the Polygon.\n     */\n    polyClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\n     */\n    polyDblClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is repeatedly fired while the user drags the polygon.\n     */\n    polyDrag: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user stops dragging the polygon.\n     */\n    polyDragEnd: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the user starts dragging the polygon.\n     */\n    polyDragStart: EventEmitter<google.maps.MouseEvent>;\n    /**\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\n     */\n    polyMouseDown: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\n     */\n    polyMouseMove: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired on Polygon mouseout.\n     */\n    polyMouseOut: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired on Polygon mouseover.\n     */\n    polyMouseOver: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\n     */\n    polyMouseUp: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired when the Polygon is right-clicked on.\n     */\n    polyRightClick: EventEmitter<google.maps.PolyMouseEvent>;\n    /**\n     * This event is fired after Polygon first path changes.\n     */\n    polyPathsChange: EventEmitter<MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>>;\n    private static _polygonOptionsAttributes;\n    private _id;\n    private _polygonAddedToManager;\n    private _subscriptions;\n    constructor(_polygonManager: PolygonManager);\n    /** @internal */\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): any;\n    private _init;\n    private _addEventListeners;\n    private _updatePolygonOptions;\n    /** @internal */\n    id(): string;\n    /** @internal */\n    ngOnDestroy(): void;\n    getPath(): Promise<google.maps.LatLng[]>;\n    getPaths(): Promise<google.maps.LatLng[][]>;\n}\n"]}