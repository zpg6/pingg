{"version":3,"file":"angular-fire-firestore.js","sources":["../../../src/firestore/observable/fromRef.ts","../../../src/firestore/collection/changes.ts","../../../src/firestore/collection/collection.ts","../../../src/firestore/document/document.ts","../../../src/firestore/collection-group/collection-group.ts","../../../src/firestore/firestore.ts","../../../src/firestore/firestore.module.ts","../../../src/firestore/interfaces.ts"],"sourcesContent":["import { asyncScheduler, Observable, SchedulerLike } from 'rxjs';\nimport { Action, DocumentReference, DocumentSnapshot, Query, QuerySnapshot, Reference } from '../interfaces';\nimport { map } from 'rxjs/operators';\n\nfunction _fromRef<T, R>(ref: Reference<T>, scheduler: SchedulerLike = asyncScheduler): Observable<R> {\n  return new Observable(subscriber => {\n    let unsubscribe;\n    if (scheduler != null) {\n      scheduler.schedule(() => {\n        unsubscribe = ref.onSnapshot(subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot(subscriber);\n    }\n\n    return () => {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nexport function fromRef<R>(ref: DocumentReference | Query, scheduler?: SchedulerLike) {\n  return _fromRef<typeof ref, R>(ref, scheduler);\n}\n\nexport function fromDocRef<T>(ref: DocumentReference, scheduler?: SchedulerLike): Observable<Action<DocumentSnapshot<T>>> {\n  return fromRef<DocumentSnapshot<T>>(ref, scheduler)\n    .pipe(\n      map(payload => ({ payload, type: 'value' }))\n    );\n}\n\nexport function fromCollectionRef<T>(ref: Query, scheduler?: SchedulerLike): Observable<Action<QuerySnapshot<T>>> {\n  return fromRef<QuerySnapshot<T>>(ref, scheduler).pipe(map(payload => ({ payload, type: 'query' })));\n}\n","import { fromCollectionRef } from '../observable/fromRef';\nimport { Observable, SchedulerLike } from 'rxjs';\nimport { map, scan } from 'rxjs/operators';\n\nimport { DocumentChange, DocumentChangeAction, DocumentChangeType, Query } from '../interfaces';\n\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\nexport function docChanges<T>(query: Query, scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query, scheduler)\n    .pipe(\n      map(action =>\n        action.payload.docChanges()\n          .map(change => ({ type: change.type, payload: change } as DocumentChangeAction<T>))));\n}\n\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\nexport function sortedChanges<T>(\n  query: Query,\n  events: DocumentChangeType[],\n  scheduler?: SchedulerLike): Observable<DocumentChangeAction<T>[]> {\n  return fromCollectionRef(query, scheduler)\n    .pipe(\n      map(changes => changes.payload.docChanges()),\n      scan((current, changes) => combineChanges(current, changes, events), []),\n      map(changes => changes.map(c => ({ type: c.type, payload: c } as DocumentChangeAction<T>))));\n}\n\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\nexport function combineChanges<T>(current: DocumentChange<T>[], changes: DocumentChange<T>[], events: DocumentChangeType[]) {\n  changes.forEach(change => {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n\n/**\n * Creates a new sorted array from a new change.\n */\nexport function combineChange<T>(combined: DocumentChange<T>[], change: DocumentChange<T>): DocumentChange<T>[] {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {\n        // Not sure why the duplicates are getting fired\n      } else {\n        combined.splice(change.newIndex, 0, change);\n      }\n      break;\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          combined.splice(change.oldIndex, 1);\n          combined.splice(change.newIndex, 0, change);\n        } else {\n          combined.splice(change.newIndex, 1, change);\n        }\n      }\n      break;\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        combined.splice(change.oldIndex, 1);\n      }\n      break;\n  }\n  return combined;\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, scan } from 'rxjs/operators';\nimport { firestore } from 'firebase/app';\n\nimport { CollectionReference, DocumentChangeAction, DocumentChangeType, DocumentData, DocumentReference, Query } from '../interfaces';\nimport { docChanges, sortedChanges } from './changes';\nimport { AngularFirestoreDocument } from '../document/document';\nimport { AngularFirestore } from '../firestore';\n\nexport function validateEventsArray(events?: DocumentChangeType[]) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n  return events;\n}\n\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollection<T= DocumentData> {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  constructor(\n    public readonly ref: CollectionReference,\n    private readonly query: Query,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if (!events || events.length === 0) {\n      return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n        this.afs.keepUnstableUntilFirst\n      );\n    }\n    return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n      map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n      filter(changes =>  changes.length > 0),\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   *\n   * If the `idField` option is provided, document IDs are included and mapped to the\n   * provided `idField` property name.\n   */\n  valueChanges(): Observable<T[]>;\n  // tslint:disable-next-line:unified-signatures\n  valueChanges({}): Observable<T[]>;\n  valueChanges<K extends string>(options: {idField: K}): Observable<(T & { [T in K]: string })[]>;\n  valueChanges<K extends string>(options: {idField?: K} = {}): Observable<T[]> {\n    return fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.payload.docs.map(a => {\n          if (options.idField) {\n            return {\n              ...a.data() as {},\n              ...{ [options.idField]: a.id }\n            } as T & { [T in K]: string };\n          } else {\n            return a.data();\n          }\n        })),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n\n  /**\n   * Add data to a collection reference.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query.\n   */\n  add(data: T): Promise<DocumentReference> {\n    return this.ref.add(data);\n  }\n\n  /**\n   * Create a reference to a single document in a collection.\n   */\n  doc<T>(path?: string): AngularFirestoreDocument<T> {\n    return new AngularFirestoreDocument<T>(this.ref.doc(path), this.afs);\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { Action, DocumentData, DocumentReference, DocumentSnapshot, QueryFn, SetOptions } from '../interfaces';\nimport { fromDocRef } from '../observable/fromRef';\nimport { map, observeOn } from 'rxjs/operators';\nimport { AngularFirestore, associateQuery } from '../firestore';\nimport { AngularFirestoreCollection } from '../collection/collection';\nimport { firestore } from 'firebase/app';\n\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\nexport class AngularFirestoreDocument<T= DocumentData> {\n\n  /**\n   * The contstuctor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  constructor(public ref: DocumentReference, private afs: AngularFirestore) { }\n\n  /**\n   * Create or overwrite a single document.\n   */\n  set(data: T, options?: SetOptions): Promise<void> {\n    return this.ref.set(data, options);\n  }\n\n  /**\n   * Update some fields of a document without overwriting the entire document.\n   */\n  update(data: Partial<T>): Promise<void> {\n    return this.ref.update(data);\n  }\n\n  /**\n   * Delete a document.\n   */\n  delete(): Promise<void> {\n    return this.ref.delete();\n  }\n\n  /**\n   * Create a reference to a sub-collection given a path and an optional query\n   * function.\n   */\n  collection<R= DocumentData>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<R> {\n    const collectionRef = this.ref.collection(path);\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    return new AngularFirestoreCollection<R>(ref, query, this.afs);\n  }\n\n  /**\n   * Listen to snapshot updates from the document.\n   */\n  snapshotChanges(): Observable<Action<DocumentSnapshot<T>>> {\n    const scheduledFromDocRef$ = fromDocRef<T>(this.ref, this.afs.schedulers.outsideAngular);\n    return scheduledFromDocRef$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to unwrapped snapshot updates from the document.\n   */\n  valueChanges(): Observable<T|undefined> {\n    return this.snapshotChanges().pipe(\n      map(action => {\n        return action.payload.data();\n      })\n    );\n  }\n\n  /**\n   * Retrieve the document once.\n   */\n  get(options?: firestore.GetOptions) {\n    return from(this.ref.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular),\n    );\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { fromCollectionRef } from '../observable/fromRef';\nimport { filter, map, observeOn, scan } from 'rxjs/operators';\nimport { firestore } from 'firebase/app';\n\nimport { DocumentChangeAction, DocumentChangeType, DocumentData, Query } from '../interfaces';\nimport { validateEventsArray } from '../collection/collection';\nimport { docChanges, sortedChanges } from '../collection/changes';\nimport { AngularFirestore } from '../firestore';\n\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\nexport class AngularFirestoreCollectionGroup<T= DocumentData> {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  constructor(\n    private readonly query: Query,\n    private readonly afs: AngularFirestore) { }\n\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n  stateChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    if (!events || events.length === 0) {\n      return docChanges<T>(this.query, this.afs.schedulers.outsideAngular).pipe(\n        this.afs.keepUnstableUntilFirst\n      );\n    }\n    return docChanges<T>(this.query, this.afs.schedulers.outsideAngular)\n      .pipe(\n        map(actions => actions.filter(change => events.indexOf(change.type) > -1)),\n        filter(changes =>  changes.length > 0),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n   * but it collects each event in an array over time.\n   */\n  auditTrail(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    return this.stateChanges(events).pipe(scan((current, action) => [...current, ...action], []));\n  }\n\n  /**\n   * Create a stream of synchronized changes. This method keeps the local array in sorted\n   * query order.\n   */\n  snapshotChanges(events?: DocumentChangeType[]): Observable<DocumentChangeAction<T>[]> {\n    const validatedEvents = validateEventsArray(events);\n    const scheduledSortedChanges$ = sortedChanges<T>(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n    return scheduledSortedChanges$.pipe(\n      this.afs.keepUnstableUntilFirst\n    );\n  }\n\n  /**\n   * Listen to all documents in the collection and its possible query as an Observable.\n   */\n  valueChanges(): Observable<T[]> {\n    const fromCollectionRefScheduled$ = fromCollectionRef<T>(this.query, this.afs.schedulers.outsideAngular);\n    return fromCollectionRefScheduled$\n      .pipe(\n        map(actions => actions.payload.docs.map(a => a.data())),\n        this.afs.keepUnstableUntilFirst\n      );\n  }\n\n  /**\n   * Retrieve the results of the query once.\n   */\n  get(options?: firestore.GetOptions) {\n    return from(this.query.get(options)).pipe(\n      observeOn(this.afs.schedulers.insideAngular)\n    );\n  }\n\n}\n","import { Inject, Injectable, InjectionToken, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { from, Observable, of } from 'rxjs';\nimport {\n  AssociatedReference,\n  CollectionReference,\n  DocumentReference,\n  PersistenceSettings,\n  Query,\n  QueryFn,\n  QueryGroupFn,\n  Settings\n} from './interfaces';\nimport { AngularFirestoreDocument } from './document/document';\nimport { AngularFirestoreCollection } from './collection/collection';\nimport { AngularFirestoreCollectionGroup } from './collection-group/collection-group';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\nimport { firestore } from 'firebase/app';\nimport firebase from '@firebase/app';\nimport { registerFirestore } from '@firebase/firestore';\nimport 'firebase/firestore';\n\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\nexport const ENABLE_PERSISTENCE = new InjectionToken<boolean>('angularfire2.enableFirestorePersistence');\nexport const PERSISTENCE_SETTINGS = new InjectionToken<PersistenceSettings | undefined>('angularfire2.firestore.persistenceSettings');\nexport const SETTINGS = new InjectionToken<Settings>('angularfire2.firestore.settings');\n\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\nexport function associateQuery(collectionRef: CollectionReference, queryFn = ref => ref): AssociatedReference {\n  const query = queryFn(collectionRef);\n  const ref = collectionRef;\n  return { query, ref };\n}\n\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFirestore {\n  public readonly firestore: firestore.Firestore;\n  public readonly persistenceEnabled$: Observable<boolean>;\n  public readonly schedulers: ɵAngularFireSchedulers;\n  public readonly keepUnstableUntilFirst: <T>(obs: Observable<T>) => Observable<T>;\n\n  /**\n   * Each Feature of AngularFire has a FirebaseApp injected. This way we\n   * don't rely on the main Firebase App instance and we can create named\n   * apps and use multiple apps.\n   */\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    @Optional() @Inject(ENABLE_PERSISTENCE) shouldEnablePersistence: boolean | null,\n    @Optional() @Inject(SETTINGS) settings: Settings | null,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone,\n    @Optional() @Inject(PERSISTENCE_SETTINGS) persistenceSettings: PersistenceSettings | null\n  ) {\n    this.schedulers = new ɵAngularFireSchedulers(zone);\n    this.keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(this.schedulers);\n\n    this.firestore = zone.runOutsideAngular(() => {\n      const app = ɵfirebaseAppFactory(options, zone, nameOrConfig);\n      // INVESTIGATE this seems to be required because in the browser build registerFirestore is an Object?\n      //             seems like we're fighting ngcc. In the server firestore() isn't available, so I have to register\n      //             in the browser registerFirestore is not a function... maybe this is an underlying firebase-js-sdk issue\n      if (registerFirestore) {\n        registerFirestore(firebase);\n      }\n      const firestore = app.firestore();\n      if (settings) {\n        firestore.settings(settings);\n      }\n      return firestore;\n    });\n\n    if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n      // We need to try/catch here because not all enablePersistence() failures are caught\n      // https://github.com/firebase/firebase-js-sdk/issues/608\n      const enablePersistence = () => {\n        try {\n          return from(this.firestore.enablePersistence(persistenceSettings || undefined).then(() => true, () => false));\n        } catch (e) {\n          return of(false);\n        }\n      };\n      this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);\n    } else {\n      this.persistenceEnabled$ = of(false);\n    }\n  }\n\n  /**\n   * Create a reference to a Firestore Collection based on a path or\n   * CollectionReference and an optional query function to narrow the result\n   * set.\n   */\n  collection<T>(path: string, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  // tslint:disable-next-line:unified-signatures\n  collection<T>(ref: CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T>;\n  collection<T>(pathOrRef: string | CollectionReference, queryFn?: QueryFn): AngularFirestoreCollection<T> {\n    let collectionRef: CollectionReference;\n    if (typeof pathOrRef === 'string') {\n      collectionRef = this.firestore.collection(pathOrRef);\n    } else {\n      collectionRef = pathOrRef;\n    }\n    const { ref, query } = associateQuery(collectionRef, queryFn);\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreCollection<T>(refInZone, query, this);\n  }\n\n  /**\n   * Create a reference to a Firestore Collection Group based on a collectionId\n   * and an optional query function to narrow the result\n   * set.\n   */\n  collectionGroup<T>(collectionId: string, queryGroupFn?: QueryGroupFn): AngularFirestoreCollectionGroup<T> {\n    const queryFn = queryGroupFn || (ref => ref);\n    const collectionGroup: Query = this.firestore.collectionGroup(collectionId);\n    return new AngularFirestoreCollectionGroup<T>(queryFn(collectionGroup), this);\n  }\n\n  /**\n   * Create a reference to a Firestore Document based on a path or\n   * DocumentReference. Note that documents are not queryable because they are\n   * simply objects. However, documents have sub-collections that return a\n   * Collection reference and can be queried.\n   */\n  doc<T>(path: string): AngularFirestoreDocument<T>;\n  // tslint:disable-next-line:unified-signatures\n  doc<T>(ref: DocumentReference): AngularFirestoreDocument<T>;\n  doc<T>(pathOrRef: string | DocumentReference): AngularFirestoreDocument<T> {\n    let ref: DocumentReference;\n    if (typeof pathOrRef === 'string') {\n      ref = this.firestore.doc(pathOrRef);\n    } else {\n      ref = pathOrRef;\n    }\n    const refInZone = this.schedulers.ngZone.run(() => ref);\n    return new AngularFirestoreDocument<T>(refInZone, this);\n  }\n\n  /**\n   * Returns a generated Firestore Document Id.\n   */\n  createId() {\n    return this.firestore.collection('_').doc().id;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { PersistenceSettings } from './interfaces';\nimport { AngularFirestore, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS } from './firestore';\n\n@NgModule({\n  providers: [ AngularFirestore ]\n})\nexport class AngularFirestoreModule {\n  /**\n   * Attempt to enable persistent storage, if possible\n   */\n  static enablePersistence(persistenceSettings?: PersistenceSettings): ModuleWithProviders {\n    return {\n      ngModule: AngularFirestoreModule,\n      providers: [\n        { provide: ENABLE_PERSISTENCE, useValue: true },\n        { provide: PERSISTENCE_SETTINGS, useValue: persistenceSettings },\n      ]\n    };\n  }\n}\n","import { Subscriber } from 'rxjs';\nimport { firestore } from 'firebase/app';\n\nexport type Settings =  firestore.Settings;\nexport type CollectionReference = firestore.CollectionReference;\nexport type DocumentReference = firestore.DocumentReference;\nexport type PersistenceSettings = firestore.PersistenceSettings;\nexport type DocumentChangeType = firestore.DocumentChangeType;\nexport type SnapshotOptions = firestore.SnapshotOptions;\nexport type FieldPath = firestore.FieldPath;\nexport type Query = firestore.Query;\n\nexport type SetOptions = firestore.SetOptions;\nexport type DocumentData = firestore.DocumentData;\n\nexport interface DocumentSnapshotExists<T> extends firestore.DocumentSnapshot {\n  readonly exists: true;\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface DocumentSnapshotDoesNotExist extends firestore.DocumentSnapshot {\n  readonly exists: false;\n  data(options?: SnapshotOptions): undefined;\n  get(fieldPath: string | FieldPath, options?: SnapshotOptions): undefined;\n}\n\nexport type DocumentSnapshot<T> = DocumentSnapshotExists<T> | DocumentSnapshotDoesNotExist;\n\nexport interface QueryDocumentSnapshot<T> extends firestore.QueryDocumentSnapshot {\n  data(options?: SnapshotOptions): T;\n}\n\nexport interface QuerySnapshot<T> extends firestore.QuerySnapshot {\n  readonly docs: QueryDocumentSnapshot<T>[];\n}\n\nexport interface DocumentChange<T> extends firestore.DocumentChange {\n  readonly doc: QueryDocumentSnapshot<T>;\n}\n\nexport interface DocumentChangeAction<T> {\n  type: DocumentChangeType;\n  payload: DocumentChange<T>;\n}\n\nexport interface Action<T> {\n  type: string;\n  payload: T;\n}\n\nexport interface Reference<T> {\n  onSnapshot: (sub: Subscriber<any>) => any;\n}\n\n// A convience type for making a query.\n// Example: const query = (ref) => ref.where('name', == 'david');\nexport type QueryFn = (ref: CollectionReference) => Query;\n\nexport type QueryGroupFn = (query: Query) => Query;\n\n/**\n * A structure that provides an association between a reference\n * and a query on that reference. Note: Performing operations\n * on the reference can lead to confusing results with complicated\n * queries.\n *\n * Example:\n *\n * const query = ref.where('type', '==', 'Book').\n *                  .where('price', '>' 18.00)\n *                  .where('price', '<' 100.00)\n *                  .where('category', '==', 'Fiction')\n *                  .where('publisher', '==', 'BigPublisher')\n *\n * // This addition would not be a result of the query above\n * ref.add({\n *  type: 'Magazine',\n *  price: 4.99,\n *  category: 'Sports',\n *  publisher: 'SportsPublisher'\n * });\n */\nexport interface AssociatedReference {\n  ref: CollectionReference;\n  query: Query;\n}\n"],"names":[],"mappings":"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"}