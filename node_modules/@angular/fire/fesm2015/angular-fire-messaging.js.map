{"version":3,"file":"angular-fire-messaging.js","sources":["../../../src/messaging/messaging.ts","../../../src/messaging/messaging.module.ts"],"sourcesContent":["import { Inject, Injectable, NgZone, Optional, PLATFORM_ID } from '@angular/core';\nimport { messaging } from 'firebase/app';\nimport { concat, EMPTY, Observable, of, throwError } from 'rxjs';\nimport { catchError, defaultIfEmpty, map, mergeMap, observeOn, switchMap } from 'rxjs/operators';\nimport {\n  FIREBASE_APP_NAME,\n  FIREBASE_OPTIONS,\n  FirebaseAppConfig,\n  FirebaseOptions,\n  ɵAngularFireSchedulers,\n  ɵfirebaseAppFactory,\n  ɵlazySDKProxy,\n  ɵPromiseProxy\n} from '@angular/fire';\nimport { isPlatformServer } from '@angular/common';\n\nexport interface AngularFireMessaging extends Omit<ɵPromiseProxy<messaging.Messaging>, 'deleteToken' | 'getToken' | 'requestPermission'> {\n}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireMessaging {\n\n  public readonly requestPermission: Observable<void>;\n  public readonly getToken: Observable<string | null>;\n  public readonly tokenChanges: Observable<string | null>;\n  public readonly messages: Observable<{}>;\n  public readonly requestToken: Observable<string | null>;\n  public readonly deleteToken: (token: string) => Observable<boolean>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string | FirebaseAppConfig | null | undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n\n    const messaging = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => isPlatformServer(platformId) ? EMPTY : import('firebase/messaging')),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => app.messaging())\n    );\n\n    if (!isPlatformServer(platformId)) {\n\n      this.requestPermission = messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        // tslint:disable-next-line\n        switchMap(messaging => messaging.requestPermission())\n      );\n\n    } else {\n\n      this.requestPermission = throwError('Not available on server platform.');\n\n    }\n\n    this.getToken = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.getToken()),\n      defaultIfEmpty(null)\n    );\n\n    const tokenChanges = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onTokenRefresh.bind(messaging)).pipe(\n        switchMap(() => messaging.getToken())\n      ))\n    );\n\n    this.tokenChanges = concat(\n      messaging.pipe(\n        observeOn(schedulers.outsideAngular),\n        switchMap(messaging => messaging.getToken())\n      ),\n      tokenChanges\n    );\n\n    this.messages = messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => new Observable(messaging.onMessage.bind(messaging)))\n    );\n\n    this.requestToken = of(undefined).pipe(\n      switchMap(() => this.requestPermission),\n      catchError(() => of(null)),\n      mergeMap(() => this.tokenChanges)\n    );\n\n    this.deleteToken = (token: string) => messaging.pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(messaging => messaging.deleteToken(token)),\n      defaultIfEmpty(false)\n    );\n\n    return ɵlazySDKProxy(this, messaging, zone);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireMessaging } from './messaging';\n\n@NgModule({\n  providers: [ AngularFireMessaging ]\n})\nexport class AngularFireMessagingModule { }\n"],"names":[],"mappings":"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"}