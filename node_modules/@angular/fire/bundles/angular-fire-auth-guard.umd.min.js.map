{"version":3,"sources":["../../../src/auth-guard/auth-guard.ts","../../../src/auth-guard/auth-guard.module.ts"],"names":["loggedIn","map","user","options","nameOrConfig","zone","router","_this","this","canActivate","next","state","authPipeFactory","data","authState","pipe","take","can","createUrlTree","schedulers","ɵAngularFireSchedulers","keepUnstableUntilFirst","ɵkeepUnstableUntilFirstFactory","auth","of","undefined","observeOn","outsideAngular","switchMap","runOutsideAngular","import","ɵfirebaseAppFactory","app","shareReplay","bufferSize","refCount","Observable","onAuthStateChanged","bind","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","NgZone","Router","isNotAnonymous","isAnonymous","idTokenResult","getIdTokenResult","emailVerified","customClaims","claims","NgModule","providers","AngularFireAuthGuard","authGuardPipe","claim","hasOwnProperty","redirect"],"mappings":"2jBAkBaA,EAAqBC,EAAAA,KAAI,SAAAC,GAAQ,QAAEA,OAS9C,SAC4BC,EACaC,EACvCC,EACQC,GAJV,IAAAC,EAAAC,KAIUA,KAAAF,OAAAA,EAoBVE,KAAAC,YAAW,SAAIC,EAA8BC,OACrCC,EAAkBF,EAAKG,KAAkB,eAAA,WAAgC,OAAAb,GAC/E,OAAOO,EAAKO,UAAUC,KACpBC,EAAAA,KAAK,GACLJ,EAAgBF,EAAMC,GACtBV,EAAAA,KAAG,SAACgB,GAAO,MAAe,kBAARA,EAAoBA,EAAMV,EAAKD,OAAOY,cAAa,YAtBjEC,EAAa,IAAIC,EAAAA,uBAAuBf,GACxCgB,EAAyBC,EAAAA,+BAA+BH,GAExDI,EAAOC,EAAAA,QAAGC,GAAWV,KACzBW,EAAAA,UAAU,IAAIN,EAAAA,uBAAuBf,GAAMsB,gBAC3CC,EAAAA,WAAS,WAAO,OAAAvB,EAAKwB,mBAAiB,WAAO,OAAAC,OAAO,uBACpD7B,EAAAA,KAAG,WAAO,OAAA8B,EAAAA,oBAAoB5B,EAASE,EAAMD,MAC7CH,EAAAA,KAAG,SAAC+B,GAAO,OAAA3B,EAAKwB,mBAAiB,WAAO,OAAAG,EAAIT,aAC5CU,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,KAGzC3B,KAAKM,UAAYS,EAAKR,KACpBa,EAAAA,WAAS,SAACL,GAAQ,OAAA,IAAIa,EAAAA,WAAsBb,EAAKc,mBAAmBC,KAAKf,OACzEF,wBA3BLkB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EAOTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,4BA7BKC,EAAAA,cACiBC,EAAAA,oNAkEjCC,EAA2BhD,EAAAA,KAAI,SAAAC,GAAQ,QAAEA,IAASA,EAAKgD,eACvDC,EAAgBvB,EAAAA,WAAU,SAAC1B,GAAoB,OAAAA,EAAOA,EAAKkD,mBAAqB5B,EAAAA,GAAG,SACnF6B,EAA0BpD,EAAAA,KAAI,SAAAC,GAAQ,QAAEA,GAAQA,EAAKmD,iBACrDC,EAAevC,EAAAA,KAAKoC,EAAelD,EAAAA,KAAI,SAAAkD,GAAiB,OAAAA,EAAgBA,EAAcI,OAAS,SChE5G,iCAHCC,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,UAAW,CAAEC,6ED0DS,SAAI3C,GAA4B,MAAA,CACpDN,YAAa,CAAEiD,GAAwB7C,KAAM,CAAE8C,cAAe5C,yDAQvC,SACxB6C,GAAU,OAAA7C,EAAAA,KAAKuC,EAAcrD,EAAAA,KAAG,SAACsD,GAAW,OAAAA,EAAOM,eAAeD,+EAGtC,SAC5BE,GAAa,OAAA/C,EAAAA,KAAKf,EAAUC,EAAAA,KAAG,SAACD,GAAY,OAAAA,GAAY8D,IAAY,gCAHpC,SAChCA,GAAa,OAAA/C,EAAAA,KAAKf,EAAUC,EAAAA,KAAG,SAACD,GAAY,OAAAA,GAAY8D","sourcesContent":["import { Inject, Injectable, NgZone, Optional } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of, pipe, UnaryFunction } from 'rxjs';\nimport { map, observeOn, shareReplay, switchMap, take } from 'rxjs/operators';\nimport { User } from 'firebase/app';\nimport {\n  ɵAngularFireSchedulers,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  ɵfirebaseAppFactory,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\n\nexport type AuthPipeGenerator = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => AuthPipe;\nexport type AuthPipe = UnaryFunction<Observable<User|null>, Observable<boolean|any[]>>;\n\nexport const loggedIn: AuthPipe = map(user => !!user);\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuthGuard implements CanActivate {\n\n  authState: Observable<User|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    zone: NgZone,\n    private router: Router\n  ) {\n\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n\n    const auth = of(undefined).pipe(\n      observeOn(new ɵAngularFireSchedulers(zone).outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => app.auth())),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    this.authState = auth.pipe(\n      switchMap(auth => new Observable<User|null>(auth.onAuthStateChanged.bind(auth))),\n      keepUnstableUntilFirst\n    );\n  }\n\n  canActivate = (next: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {\n    const authPipeFactory = next.data.authGuardPipe as AuthPipeGenerator || (() => loggedIn);\n    return this.authState.pipe(\n      take(1),\n      authPipeFactory(next, state),\n      map(can => typeof can === 'boolean' ? can : this.router.createUrlTree(can as any[]))\n    );\n  }\n\n}\n\nexport const canActivate = (pipe: AuthPipeGenerator) => ({\n    canActivate: [ AngularFireAuthGuard ], data: { authGuardPipe: pipe }\n});\n\n\nexport const isNotAnonymous: AuthPipe = map(user => !!user && !user.isAnonymous);\nexport const idTokenResult = switchMap((user: User|null) => user ? user.getIdTokenResult() : of(null));\nexport const emailVerified: AuthPipe = map(user => !!user && user.emailVerified);\nexport const customClaims = pipe(idTokenResult, map(idTokenResult => idTokenResult ? idTokenResult.claims : []));\nexport const hasCustomClaim: (claim: string) => AuthPipe =\n  (claim) => pipe(customClaims, map(claims =>  claims.hasOwnProperty(claim)));\nexport const redirectUnauthorizedTo: (redirect: any[]) => AuthPipe =\n  (redirect) => pipe(loggedIn, map(loggedIn => loggedIn || redirect));\nexport const redirectLoggedInTo: (redirect: any[]) => AuthPipe =\n  (redirect) => pipe(loggedIn, map(loggedIn => loggedIn && redirect || true));\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuthGuard } from './auth-guard';\n\n@NgModule({\n  providers: [ AngularFireAuthGuard ]\n})\nexport class AngularFireAuthGuardModule { }\n"]}