{"version":3,"sources":["../../../src/auth/auth.ts","../../../src/auth/auth.module.ts"],"names":["options","nameOrConfig","platformId","zone","schedulers","ɵAngularFireSchedulers","keepUnstableUntilFirst","ɵkeepUnstableUntilFirstFactory","auth","of","undefined","pipe","observeOn","outsideAngular","switchMap","runOutsideAngular","import","map","ɵfirebaseAppFactory","app","shareReplay","bufferSize","refCount","first","subscribe","this","authState","Observable","onAuthStateChanged","bind","user","onIdTokenChanged","idToken","from","getIdToken","idTokenResult","getIdTokenResult","ɵlazySDKProxy","Injectable","args","providedIn","Inject","FIREBASE_OPTIONS","Optional","type","FIREBASE_APP_NAME","Object","decorators","PLATFORM_ID","NgZone","NgModule","providers","AngularFireAuth"],"mappings":"mfA6CE,SAC4BA,EACaC,EAElBC,EACrBC,OAEMC,EAAa,IAAIC,EAAAA,uBAAuBF,GACxCG,EAAyBC,EAAAA,+BAA+BH,GAExDI,EAAOC,EAAAA,QAAGC,GAAWC,KACzBC,EAAAA,UAAUR,EAAWS,gBACrBC,EAAAA,WAAS,WAAO,OAAAX,EAAKY,mBAAiB,WAAO,OAAAC,OAAO,uBACpDC,EAAAA,KAAG,WAAO,OAAAC,EAAAA,oBAAoBlB,EAASG,EAAMF,MAC7CgB,EAAAA,KAAG,SAACE,GAAO,OAAAhB,EAAKY,mBAAiB,WAAO,OAAAI,EAAIX,aAC5CY,EAAAA,YAAY,CAAEC,WAAY,EAAGC,UAAU,KA4BzC,OApBUd,EAAKG,KAAKY,EAAAA,SAASC,YAE7BC,KAAKC,UAAYlB,EAAKG,KACpBG,EAAAA,WAAS,SAACN,GAAQ,OAAAL,EAAKY,mBAAiB,WAAO,OAAA,IAAIY,EAAAA,WAAsBnB,EAAKoB,mBAAmBC,KAAKrB,UACtGF,GAGFmB,KAAKK,KAAOtB,EAAKG,KACfG,EAAAA,WAAS,SAACN,GAAQ,OAAAL,EAAKY,mBAAiB,WAAO,OAAA,IAAIY,EAAAA,WAAsBnB,EAAKuB,iBAAiBF,KAAKrB,UACpGF,GAGFmB,KAAKO,QAAUP,KAAKK,KAAKnB,KACvBG,EAAAA,WAAS,SAACgB,GAAQ,OAAAA,EAAOG,EAAAA,KAAKH,EAAKI,cAAgBzB,EAAAA,GAAG,UAGxDgB,KAAKU,cAAgBV,KAAKK,KAAKnB,KAC7BG,EAAAA,WAAS,SAACgB,GAAQ,OAAAA,EAAOG,EAAAA,KAAKH,EAAKM,oBAAsB3B,EAAAA,GAAG,UAGvD4B,EAAAA,cAAcZ,KAAMjB,EAAML,wBAtEpCmC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,4EA2BTC,EAAAA,OAAMF,KAAA,CAACG,EAAAA,oDACPC,EAAAA,UAAQ,CAAAC,KAAIH,EAAAA,OAAMF,KAAA,CAACM,EAAAA,4BAEaC,OAAMC,WAAA,CAAA,CAAAH,KAAtCH,EAAAA,OAAMF,KAAA,CAACS,EAAAA,sBAjD2BC,EAAAA,2NCMvC,iCAHCC,EAAAA,SAAQX,KAAA,CAAC,CACRY,UAAW,CAAEC","sourcesContent":["import { Injectable, Inject, Optional, NgZone, PLATFORM_ID } from '@angular/core';\nimport { Observable, of, from } from 'rxjs';\nimport { switchMap, map, observeOn, shareReplay, first } from 'rxjs/operators';\nimport {\n  FIREBASE_OPTIONS,\n  FIREBASE_APP_NAME,\n  FirebaseOptions,\n  FirebaseAppConfig,\n  ɵPromiseProxy,\n  ɵlazySDKProxy,\n  ɵfirebaseAppFactory,\n  ɵAngularFireSchedulers,\n  ɵkeepUnstableUntilFirstFactory\n} from '@angular/fire';\nimport { User, auth } from 'firebase/app';\n\nexport interface AngularFireAuth extends ɵPromiseProxy<auth.Auth> {}\n\n@Injectable({\n  providedIn: 'any'\n})\nexport class AngularFireAuth {\n\n  /**\n   * Observable of authentication state; as of Firebase 4.0 this is only triggered via sign-in/out\n   */\n  public readonly authState: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's JWT token used to identify the user to a Firebase service (or null).\n   */\n  public readonly idToken: Observable<string|null>;\n\n  /**\n   * Observable of the currently signed-in user (or null).\n   */\n  public readonly user: Observable<User|null>;\n\n  /**\n   * Observable of the currently signed-in user's IdTokenResult object which contains the ID token JWT string and other\n   * helper properties for getting different data associated with the token as well as all the decoded payload claims\n   * (or null).\n   */\n  public readonly idTokenResult: Observable<auth.IdTokenResult|null>;\n\n  constructor(\n    @Inject(FIREBASE_OPTIONS) options: FirebaseOptions,\n    @Optional() @Inject(FIREBASE_APP_NAME) nameOrConfig: string|FirebaseAppConfig|null|undefined,\n    // tslint:disable-next-line:ban-types\n    @Inject(PLATFORM_ID) platformId: Object,\n    zone: NgZone\n  ) {\n    const schedulers = new ɵAngularFireSchedulers(zone);\n    const keepUnstableUntilFirst = ɵkeepUnstableUntilFirstFactory(schedulers);\n\n    const auth = of(undefined).pipe(\n      observeOn(schedulers.outsideAngular),\n      switchMap(() => zone.runOutsideAngular(() => import('firebase/auth'))),\n      map(() => ɵfirebaseAppFactory(options, zone, nameOrConfig)),\n      map(app => zone.runOutsideAngular(() => app.auth())),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n\n    // HACK, as we're exporting auth.Auth, rather than auth, developers importing firebase.auth\n    //       (e.g, `import { auth } from 'firebase/app'`) are getting an undefined auth object unexpectedly\n    //       as we're completely lazy. Let's eagerly load the Auth SDK here.\n    //       There could potentially be race conditions still... but this greatly decreases the odds while\n    //       we reevaluate the API.\n    const _ = auth.pipe(first()).subscribe();\n\n    this.authState = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onAuthStateChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.user = auth.pipe(\n      switchMap(auth => zone.runOutsideAngular(() => new Observable<User|null>(auth.onIdTokenChanged.bind(auth)))),\n      keepUnstableUntilFirst\n    );\n\n    this.idToken = this.user.pipe(\n      switchMap(user => user ? from(user.getIdToken()) : of(null))\n    );\n\n    this.idTokenResult = this.user.pipe(\n      switchMap(user => user ? from(user.getIdTokenResult()) : of(null))\n    );\n\n    return ɵlazySDKProxy(this, auth, zone);\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { AngularFireAuth } from './auth';\n\n@NgModule({\n  providers: [ AngularFireAuth ]\n})\nexport class AngularFireAuthModule { }\n"]}