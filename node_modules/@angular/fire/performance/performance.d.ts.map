{"version":3,"file":"performance.d.ts","sources":["performance.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { InjectionToken, NgZone } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { performance } from 'firebase/app';\nimport { FirebaseApp, ɵPromiseProxy } from '@angular/fire';\nexport declare const AUTOMATICALLY_TRACE_CORE_NG_METRICS: InjectionToken<boolean>;\nexport declare const INSTRUMENTATION_ENABLED: InjectionToken<boolean>;\nexport declare const DATA_COLLECTION_ENABLED: InjectionToken<boolean>;\nexport interface AngularFirePerformance extends ɵPromiseProxy<performance.Performance> {\n}\nexport declare class AngularFirePerformance {\n    private zone;\n    private readonly performance;\n    constructor(app: FirebaseApp, instrumentationEnabled: boolean | null, dataCollectionEnabled: boolean | null, zone: NgZone, platformId: Object);\n}\nexport declare const traceUntil: <T = any>(name: string, test: (a: T) => boolean, options?: {\n    orComplete?: boolean;\n}) => (source$: Observable<T>) => Observable<T>;\nexport declare const traceWhile: <T = any>(name: string, test: (a: T) => boolean, options?: {\n    orComplete?: boolean;\n}) => (source$: Observable<T>) => Observable<T>;\nexport declare const traceUntilComplete: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\nexport declare const traceUntilFirst: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\nexport declare const trace: <T = any>(name: string) => (source$: Observable<T>) => Observable<T>;\n"]}